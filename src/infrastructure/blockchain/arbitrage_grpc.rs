use std::sync::Arc;
use tokio::sync::RwLock;
use std::collections::HashMap;
use std::time::{Duration, Instant};
use futures_util::{StreamExt, SinkExt};
use bs58;

use yellowstone_grpc_client::{GeyserGrpcClient, GeyserGrpcClientError, Interceptor};
use yellowstone_grpc_proto::prelude::*;
use yellowstone_grpc_proto::geyser::{
    SubscribeRequest, SubscribeRequestFilterTransactions, SubscribeUpdateTransaction,
    CommitmentLevel,
};

use crate::domain::dex::DexType;
use crate::shared::errors::AppError;
use crate::shared::types::YellowstoneGrpcConfig;
use tracing::{info, warn, error, debug};

/// –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ DEX
#[derive(Debug, Clone)]
pub struct DexTransactionInfo {
    pub signature: String,
    pub slot: u64,
    pub dex_type: DexType,
    pub program_id: String,
    pub timestamp: Instant,
    pub logs: Vec<String>,
}

/// –ö—ç—à —Ü–µ–Ω –¥–ª—è –∞—Ä–±–∏—Ç—Ä–∞–∂–∞
#[derive(Debug, Clone)]
pub struct PriceCache {
    pub token_prices: HashMap<String, f64>,
    pub last_update: Instant,
    pub update_count: u64,
}

impl PriceCache {
    pub fn new() -> Self {
        Self {
            token_prices: HashMap::new(),
            last_update: Instant::now(),
            update_count: 0,
        }
    }

    pub fn update_price(&mut self, token: String, price: f64) {
        self.token_prices.insert(token, price);
        self.last_update = Instant::now();
        self.update_count += 1;
    }

    pub fn get_price(&self, token: &str) -> Option<f64> {
        self.token_prices.get(token).copied()
    }

    pub fn is_stale(&self, max_age: Duration) -> bool {
        self.last_update.elapsed() > max_age
    }
}

/// –ê—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–π gRPC –∫–ª–∏–µ–Ω—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ DEX —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
pub struct ArbitrageGrpcClient {
    builder: Option<yellowstone_grpc_client::GeyserGrpcBuilder>,
    config: YellowstoneGrpcConfig,
    price_cache: Arc<RwLock<PriceCache>>,
    connection_status: Arc<RwLock<ConnectionStatus>>,
    subscription_handle: Option<tokio::task::JoinHandle<()>>,
}

#[derive(Debug, Clone)]
pub enum ConnectionStatus {
    Disconnected,
    Connecting,
    Connected,
    Error(String),
}

impl ArbitrageGrpcClient {
    /// –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–π gRPC –∫–ª–∏–µ–Ω—Ç
    pub fn new(config: YellowstoneGrpcConfig) -> Self {
        Self {
            builder: None,
            config,
            price_cache: Arc::new(RwLock::new(PriceCache::new())),
            connection_status: Arc::new(RwLock::new(ConnectionStatus::Disconnected)),
            subscription_handle: None,
        }
    }

    /// –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ gRPC —Å–µ—Ä–≤–µ—Ä—É
    pub async fn connect(&mut self) -> Result<(), AppError> {
        info!("üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Yellowstone gRPC: {}", self.config.endpoint);
        
        {
            let mut status = self.connection_status.write().await;
            *status = ConnectionStatus::Connecting;
        }

        // –°–æ–∑–¥–∞–µ–º builder –¥–ª—è gRPC –∫–ª–∏–µ–Ω—Ç–∞
        let builder = GeyserGrpcClient::build_from_shared(self.config.endpoint.clone())
            .map_err(|e| AppError::BlockchainError(format!("Failed to build client: {}", e)))?
            .x_token::<String>(self.config.token.clone())
            .map_err(|e| AppError::BlockchainError(format!("Failed to set x_token: {}", e)))?;
        
        self.builder = Some(builder);
        
        {
            let mut status = self.connection_status.write().await;
            *status = ConnectionStatus::Connected;
        }

        info!("‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª–∏ Yellowstone gRPC builder!");
        Ok(())
    }

    /// –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ DEX –ø—Ä–æ–≥—Ä–∞–º–º
    pub async fn subscribe_to_dex_transactions(&mut self) -> Result<(), AppError> {
        info!("üì° –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ DEX –ø—Ä–æ–≥—Ä–∞–º–º...");
        
        let builder = self.builder.take()
            .ok_or_else(|| AppError::BlockchainError("gRPC builder not prepared".to_string()))?;

        // –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç –∏ –ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è
        let mut client = builder.connect().await
            .map_err(|e| AppError::BlockchainError(format!("Failed to connect: {}", e)))?;

        // –°–æ–∑–¥–∞–µ–º —Ñ–∏–ª—å—Ç—Ä –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ DEX —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        let dex_programs = vec![
            "whirLbMiicVdio4qvUfM5KAg6Ct8VwpYzGff3uctyCc".to_string(), // Orca Whirlpool
            "675kPX9MHTjS2zt1qfr1NYHuzeLXfQM9H24wFSUt1Mp8".to_string(), // Raydium AMM
        ];

        // –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É
        let subscribe_request = SubscribeRequest {
            slots: std::collections::HashMap::new(),
            accounts: std::collections::HashMap::new(),
            transactions: std::collections::HashMap::from([
                ("All".to_string(), SubscribeRequestFilterTransactions {
                    vote: None,
                    failed: Some(false),
                    signature: None,
                    account_include: dex_programs,
                    account_exclude: vec![],
                    account_required: vec![]
                })
            ]),
            transactions_status: std::collections::HashMap::new(),
            entry: std::collections::HashMap::new(),
            blocks: std::collections::HashMap::new(),
            blocks_meta: std::collections::HashMap::new(),
            commitment: Some(CommitmentLevel::Processed as i32),
            accounts_data_slice: vec![],
            ping: None,
            from_slot: None,
        };

        // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –º–µ—Ç–æ–¥
        let (mut subscribe_tx, mut stream) = client.subscribe().await
            .map_err(|e| AppError::BlockchainError(format!("Failed to subscribe: {}", e)))?;
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É
        subscribe_tx.send(subscribe_request).await
            .map_err(|e| AppError::BlockchainError(format!("Failed to send subscribe request: {}", e)))?;

        info!("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ DEX —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!");
        info!("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–æ—Ç–æ–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π...");

        // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–æ—Ç–æ–∫–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∑–∞–¥–∞—á–µ
        let price_cache = self.price_cache.clone();
        let connection_status = self.connection_status.clone();
        
        let handle = tokio::spawn(async move {
            while let Some(update) = stream.next().await {
                match update {
                    Ok(update) => {
                        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
                        match update.update_oneof {
                            Some(yellowstone_grpc_proto::geyser::subscribe_update::UpdateOneof::Transaction(transaction)) => {
                                if let Err(e) = Self::process_transaction_update_static(&transaction, &price_cache).await {
                                    error!("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {}", e);
                                }
                            }
                            Some(yellowstone_grpc_proto::geyser::subscribe_update::UpdateOneof::Slot(slot)) => {
                                debug!("üìä –ü–æ–ª—É—á–µ–Ω —Å–ª–æ—Ç: {}", slot.slot);
                            }
                            Some(yellowstone_grpc_proto::geyser::subscribe_update::UpdateOneof::Account(account)) => {
                                if let Some(account_info) = &account.account {
                                    let pubkey_str = bs58::encode(&account_info.pubkey).into_string();
                                    info!("üè¶ –ü–æ–ª—É—á–µ–Ω –∞–∫–∫–∞—É–Ω—Ç: {}", pubkey_str);
                                } else {
                                    debug!("üè¶ –ü–æ–ª—É—á–µ–Ω –∞–∫–∫–∞—É–Ω—Ç –±–µ–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏");
                                }
                            }
                            Some(yellowstone_grpc_proto::geyser::subscribe_update::UpdateOneof::Block(block)) => {
                                debug!("üß± –ü–æ–ª—É—á–µ–Ω –±–ª–æ–∫: {}", block.slot);
                            }
                            Some(yellowstone_grpc_proto::geyser::subscribe_update::UpdateOneof::TransactionStatus(status)) => {
                                debug!("üìã –°—Ç–∞—Ç—É—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {:?}", status);
                            }
                            Some(yellowstone_grpc_proto::geyser::subscribe_update::UpdateOneof::Ping(ping)) => {
                                debug!("üèì –ü–æ–ª—É—á–µ–Ω ping: {:?}", ping);
                            }
                            Some(yellowstone_grpc_proto::geyser::subscribe_update::UpdateOneof::Pong(pong)) => {
                                debug!("üèì –ü–æ–ª—É—á–µ–Ω pong: {:?}", pong);
                            }
                            Some(yellowstone_grpc_proto::geyser::subscribe_update::UpdateOneof::Entry(entry)) => {
                                debug!("üìù –ü–æ–ª—É—á–µ–Ω–∞ –∑–∞–ø–∏—Å—å: {:?}", entry);
                            }
                            Some(yellowstone_grpc_proto::geyser::subscribe_update::UpdateOneof::BlockMeta(block_meta)) => {
                                debug!("üß± –ú–µ—Ç–∞ –±–ª–æ–∫–∞: {:?}", block_meta);
                            }
                            None => {
                                debug!("‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è");
                            }
                        }
                    }
                    Err(e) => {
                        error!("‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ gRPC –ø–æ—Ç–æ–∫–µ: {}", e);
                        let mut status = connection_status.write().await;
                        *status = ConnectionStatus::Error(format!("gRPC stream error: {}", e));
                    }
                }
            }
        });

        self.subscription_handle = Some(handle);
        Ok(())
    }

    /// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏–∑ gRPC –ø–æ—Ç–æ–∫–∞ (—Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ spawn)
    async fn process_transaction_update_static(
        transaction: &SubscribeUpdateTransaction,
        price_cache: &Arc<RwLock<PriceCache>>
    ) -> Result<(), AppError> {
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º DEX –ø–æ program_id –∏–∑ –ª–æ–≥–æ–≤
        let dex_type = Self::get_dex_type_from_logs_static(&transaction.transaction.as_ref().and_then(|tx| tx.meta.as_ref()).map(|meta| meta.log_messages.clone()));
        
        // –°–æ–∑–¥–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        let transaction_info = DexTransactionInfo {
            signature: bs58::encode(&transaction.transaction.as_ref().and_then(|tx| Some(tx.signature.clone())).unwrap_or_default()).into_string(),
            slot: transaction.slot,
            dex_type,
            program_id: Self::get_program_id_from_logs_static(&transaction.transaction.as_ref().and_then(|tx| tx.meta.as_ref()).map(|meta| meta.log_messages.clone())),
            timestamp: Instant::now(),
            logs: transaction.transaction.as_ref().and_then(|tx| tx.meta.as_ref()).map(|meta| meta.log_messages.clone()).unwrap_or_default(),
        };

        debug!("üîç DEX —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: {} –Ω–∞ {} (—Å–ª–æ—Ç: {})", 
            transaction_info.signature, dex_type.as_str(), transaction_info.slot);

        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –¥–ª—è –ø–æ–∏—Å–∫–∞ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞
        Self::analyze_transaction_for_arbitrage_static(&transaction_info, price_cache).await?;
        
        Ok(())
    }

    /// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏–∑ gRPC –ø–æ—Ç–æ–∫–∞
    async fn process_transaction_update(&self, transaction: &SubscribeUpdateTransaction) -> Result<(), AppError> {
        Self::process_transaction_update_static(transaction, &self.price_cache).await
    }

    /// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø DEX –ø–æ –ª–æ–≥–∞–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (—Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –º–µ—Ç–æ–¥)
    fn get_dex_type_from_logs_static(logs: &Option<Vec<String>>) -> DexType {
        let empty_vec = vec![];
        let logs = logs.as_ref().unwrap_or(&empty_vec);
        for log in logs {
            if log.contains("whirLbMiicVdio4qvUfM5KAg6Ct8VwpYzGff3uctyCc") {
                return DexType::OrcaWhirlpool;
            }
            if log.contains("675kPX9MHTjS2zt1qfr1NYHuzeLXfQM9H24wFSUt1Mp8") {
                return DexType::RaydiumAMM;
            }
        }
        DexType::OrcaWhirlpool // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
    }

    /// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø DEX –ø–æ –ª–æ–≥–∞–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    fn get_dex_type_from_logs(&self, logs: &Option<Vec<String>>) -> DexType {
        Self::get_dex_type_from_logs_static(logs)
    }

    /// –ò–∑–≤–ª–µ–∫–∞–µ–º program_id –∏–∑ –ª–æ–≥–æ–≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (—Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –º–µ—Ç–æ–¥)
    fn get_program_id_from_logs_static(logs: &Option<Vec<String>>) -> String {
        let empty_vec = vec![];
        let logs = logs.as_ref().unwrap_or(&empty_vec);
        for log in logs {
            if log.contains("whirLbMiicVdio4qvUfM5KAg6Ct8VwpYzGff3uctyCc") {
                return "whirLbMiicVdio4qvUfM5KAg6Ct8VwpYzGff3uctyCc".to_string();
            }
            if log.contains("675kPX9MHTjS2zt1qfr1NYHuzeLXfQM9H24wFSUt1Mp8") {
                return "675kPX9MHTjS2zt1qfr1NYHuzeLXfQM9H24wFSUt1Mp8".to_string();
            }
        }
        "unknown".to_string()
    }

    /// –ò–∑–≤–ª–µ–∫–∞–µ–º program_id –∏–∑ –ª–æ–≥–æ–≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    fn get_program_id_from_logs(&self, logs: &Option<Vec<String>>) -> String {
        Self::get_program_id_from_logs_static(logs)
    }

    /// –ê–Ω–∞–ª–∏–∑ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞ (—Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –º–µ—Ç–æ–¥)
    async fn analyze_transaction_for_arbitrage_static(
        transaction: &DexTransactionInfo,
        price_cache: &Arc<RwLock<PriceCache>>
    ) -> Result<(), AppError> {
        debug!("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é {} –¥–ª—è –∞—Ä–±–∏—Ç—Ä–∞–∂–∞...", transaction.signature);
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–≤–æ–ø–µ –∏–∑ –ª–æ–≥–æ–≤
        let swap_info = Self::extract_swap_info_from_logs(&transaction.logs);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à —Ü–µ–Ω –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        if let Some((token, price)) = swap_info {
            let mut cache = price_cache.write().await;
            cache.update_price(token.clone(), price);
            debug!("üí∞ –û–±–Ω–æ–≤–ª–µ–Ω–∞ —Ü–µ–Ω–∞ —Ç–æ–∫–µ–Ω–∞: {} = ${:.6}", token, price);
        }
        
        // –ü–æ–∏—Å–∫ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞ –º–µ–∂–¥—É DEX
        Self::find_arbitrage_opportunities(transaction, price_cache).await?;
        
        Ok(())
    }

    /// –ê–Ω–∞–ª–∏–∑ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞
    async fn analyze_transaction_for_arbitrage(&self, transaction: &DexTransactionInfo) -> Result<(), AppError> {
        Self::analyze_transaction_for_arbitrage_static(transaction, &self.price_cache).await
    }

    /// –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–≤–æ–ø–µ –∏–∑ –ª–æ–≥–æ–≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    fn extract_swap_info_from_logs(logs: &[String]) -> Option<(String, f64)> {
        // –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–≤–æ–ø–µ
        // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞
        for log in logs {
            if log.contains("Swap") || log.contains("swap") {
                // –ò–∑–≤–ª–µ–∫–∞–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–≤–æ–ø–µ
                // –≠—Ç–æ —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è - –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–Ω–æ –ø–∞—Ä—Å–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ DEX –ª–æ–≥–∏
                return Some(("SOL".to_string(), 100.0)); // –ó–∞–≥–ª—É—à–∫–∞
            }
        }
        None
    }

    /// –ü–æ–∏—Å–∫ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞ –º–µ–∂–¥—É DEX
    async fn find_arbitrage_opportunities(
        _transaction: &DexTransactionInfo,
        price_cache: &Arc<RwLock<PriceCache>>
    ) -> Result<(), AppError> {
        let cache = price_cache.read().await;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–Ω—ã –Ω–∞ —Ä–∞–∑–Ω—ã—Ö DEX
        if let (Some(price_orca), Some(price_raydium)) = (
            cache.get_price("SOL"),
            cache.get_price("SOL")
        ) {
            let price_diff = (price_orca - price_raydium).abs();
            let price_diff_percent = (price_diff / price_orca) * 100.0;
            
            if price_diff_percent > 0.5 { // 0.5% —Ä–∞–∑–Ω–∏—Ü–∞
                debug!("üöÄ –ù–∞–π–¥–µ–Ω–∞ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å!");
                debug!("   Orca: ${:.6}", price_orca);
                debug!("   Raydium: ${:.6}", price_raydium);
                debug!("   –†–∞–∑–Ω–∏—Ü–∞: {:.2}%", price_diff_percent);
            }
        }
        
        Ok(())
    }

    /// –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    pub async fn get_connection_status(&self) -> ConnectionStatus {
        self.connection_status.read().await.clone()
    }

    /// –ü–æ–ª—É—á–∏—Ç—å –∫—ç—à —Ü–µ–Ω
    pub async fn get_price_cache(&self) -> PriceCache {
        self.price_cache.read().await.clone()
    }

    /// –û–±–Ω–æ–≤–∏—Ç—å —Ü–µ–Ω—É —Ç–æ–∫–µ–Ω–∞
    pub async fn update_token_price(&self, token: String, price: f64) {
        let mut cache = self.price_cache.write().await;
        cache.update_price(token, price);
    }

    /// –û—Ç–∫–ª—é—á–∏—Ç—å—Å—è –æ—Ç gRPC —Å–µ—Ä–≤–µ—Ä–∞
    pub async fn disconnect(&mut self) -> Result<(), AppError> {
        info!("üîå –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç Yellowstone gRPC...");
        
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É
        if let Some(handle) = self.subscription_handle.take() {
            handle.abort();
        }
        
        // –û—á–∏—â–∞–µ–º –∫–ª–∏–µ–Ω—Ç
        self.builder = None;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        {
            let mut status = self.connection_status.write().await;
            *status = ConnectionStatus::Disconnected;
        }
        
        info!("‚úÖ –û—Ç–∫–ª—é—á–∏–ª–∏—Å—å –æ—Ç Yellowstone gRPC");
        Ok(())
    }

    /// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –ª–∏ –º—ã
    pub fn is_connected(&self) -> bool {
        self.builder.is_some()
    }
}

/// –ü–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ DEX –ø–æ program_id
fn get_dex_name(program_id: &str) -> &'static str {
    match program_id {
        "whirLbMiicVdio4qvUfM5KAg6Ct8VwpYzGff3uctyCc" => "Orca Whirlpool",
        "675kPX9MHTjS2zt1qfr1NYHuzeLXfQM9H24wFSUt1Mp8" => "Raydium V4",
        "CAMMCzo5YL8w4VFF8KVHrK22GGUsp5VTaW7grrKgrWqK" => "Raydium CLMM",
        "LBUZKhRxPF3XUpBCjp4YzTKgLccjZhTSDM9YuVaPwxo" => "Meteora DLMM",
        "Eo7WjKq67rjJQSZxS6z3YkapzY3eMj6Xy8X5EQVn5UaB" => "Meteora Pools",
        _ => "Unknown DEX",
    }
}

/// –ü–æ–ª—É—á–∏—Ç—å program_id –¥–ª—è DEX —Ç–∏–ø–∞
fn get_program_id_for_dex(dex_type: &DexType) -> String {
    match dex_type {
        DexType::OrcaWhirlpool => "whirLbMiicVdio4qvUfM5KAg6Ct8VwpYzGff3uctyCc".to_string(),
        DexType::RaydiumAMM => "675kPX9MHTjS2zt1qfr1NYHuzeLXfQM9H24wFSUt1Mp8".to_string(),
    }
}
