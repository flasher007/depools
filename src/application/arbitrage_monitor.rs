use crate::domain::arbitrage::{
    ArbitrageOpportunityDetector, ArbitrageRoute, PriceData,
};
use crate::infrastructure::blockchain::{
    ArbitrageGrpcClient, DexAdapterFactory,
};
use crate::domain::execution::{
    ArbitrageTransactionExecutor, RiskManagementConfig,
};
use crate::shared::errors::AppError;
use crate::shared::types::{Amount, BotConfig, YellowstoneGrpcConfig};
use crate::domain::arbitrage::ProfitCalculation;
use crate::domain::dex::DexType;
use std::collections::HashMap;
use std::sync::Arc;
use std::time::{Duration, Instant};
use tokio::sync::RwLock;
use tracing::{info, warn, error, debug};

/// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞
#[derive(Debug, Clone)]
pub struct ArbitrageMonitorConfig {
    pub min_profit_threshold: f64,
    pub min_liquidity: f64,
    pub update_interval_ms: u64,
    pub max_concurrent_trades: usize,
    pub risk_tolerance: f64,
    pub enable_auto_execution: bool,
    pub initial_balance_sol: f64, // –ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –≤ SOL
}

impl Default for ArbitrageMonitorConfig {
    fn default() -> Self {
        Self {
            min_profit_threshold: 0.005, // 0.5%
            min_liquidity: 10.0, // 10 SOL
            update_interval_ms: 100, // 100ms
            max_concurrent_trades: 5,
            risk_tolerance: 0.3,
            enable_auto_execution: true, // –í–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ
            initial_balance_sol: 100.0, // 100 SOL –Ω–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
        }
    }
}

/// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
#[derive(Debug, Clone)]
pub struct MonitorStats {
    pub start_time: Instant,
    pub transactions_processed: u64,
    pub opportunities_found: u64,
    pub trades_executed: u64,
    pub successful_trades: u64,
    pub failed_trades: u64,
    pub total_profit: f64,
    pub last_update: Instant,
    pub success_rate: f64,
    pub current_balance_sol: f64,
}

impl MonitorStats {
    pub fn new() -> Self {
        Self {
            start_time: Instant::now(),
            transactions_processed: 0,
            opportunities_found: 0,
            trades_executed: 0,
            successful_trades: 0,
            failed_trades: 0,
            total_profit: 0.0,
            last_update: Instant::now(),
            success_rate: 0.0,
            current_balance_sol: 0.0,
        }
    }

    pub fn update(&mut self) {
        self.last_update = Instant::now();
    }

    pub fn get_uptime(&self) -> Duration {
        self.start_time.elapsed()
    }

    pub fn get_opportunities_per_minute(&self) -> f64 {
        let uptime_minutes = self.get_uptime().as_secs_f64() / 60.0;
        if uptime_minutes > 0.0 {
            self.opportunities_found as f64 / uptime_minutes
        } else {
            0.0
        }
    }
}

/// –û—Å–Ω–æ–≤–Ω–æ–π –º–æ–Ω–∏—Ç–æ—Ä –∞—Ä–±–∏—Ç—Ä–∞–∂–∞
pub struct ArbitrageMonitor {
    config: ArbitrageMonitorConfig,
    grpc_client: ArbitrageGrpcClient,
    opportunity_detector: ArbitrageOpportunityDetector,
    dex_factory: DexAdapterFactory,
    rpc_client: Arc<solana_client::rpc_client::RpcClient>,
    arbitrage_executor: ArbitrageTransactionExecutor,
    token_metadata: Arc<crate::infrastructure::blockchain::TokenMetadataService>,
    stats: Arc<RwLock<MonitorStats>>,
    active_trades: Arc<RwLock<HashMap<String, ArbitrageRoute>>>,
    price_cache: Arc<RwLock<HashMap<String, PriceData>>>,
}

impl ArbitrageMonitor {
    /// –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –º–æ–Ω–∏—Ç–æ—Ä –∞—Ä–±–∏—Ç—Ä–∞–∂–∞
    pub fn new(
        config: BotConfig,
        monitor_config: ArbitrageMonitorConfig,
    ) -> Result<Self, AppError> {
        let yellowstone_config = YellowstoneGrpcConfig {
            enabled: true,
            endpoint: "solana-yellowstone-grpc.publicnode.com:443".to_string(), // –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞
            token: None, // –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞
            connection_timeout_ms: 10000,
            max_retries: 5,
            dex_programs: vec![
                "whirLbMiicVdio4qvUfM5KAg6Ct8VwpYzGff3uctyCc".to_string(), // Orca Whirlpool
                "675kPX9MHTjS2zt1qfr1NYHuzeLXfQM9H24wFSUt1Mp8".to_string(), // Raydium V4
            ],
        };

        let grpc_client = ArbitrageGrpcClient::new(yellowstone_config);
        let rpc_client = Arc::new(solana_client::rpc_client::RpcClient::new(config.network.rpc_url.clone()));
        let dex_factory = DexAdapterFactory::new(
            Arc::clone(&rpc_client),
            Arc::new(crate::infrastructure::blockchain::VaultReader::new(config.network.rpc_url.clone())),
            crate::infrastructure::blockchain::OrcaAccountParser::new(Arc::new(crate::infrastructure::blockchain::VaultReader::new(config.network.rpc_url.clone()))),
            crate::infrastructure::blockchain::RaydiumAccountParser::new(),
        );

        let opportunity_detector = ArbitrageOpportunityDetector::new(
            monitor_config.min_profit_threshold,
            crate::shared::types::Amount::new(
                (monitor_config.min_liquidity * 1_000_000_000.0) as u64, 
                9
            ),
            4, // max_route_length
            monitor_config.risk_tolerance,
            Arc::new(crate::infrastructure::blockchain::TokenMetadataService::new(Arc::clone(&rpc_client))),
        );

        // –°–æ–∑–¥–∞–µ–º RealTransactionExecutor
        let real_executor = crate::infrastructure::blockchain::RealTransactionExecutor::new_simple(
            config.network.rpc_url.clone()
        );

        // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞
        let risk_config = RiskManagementConfig {
            max_position_size: crate::shared::types::Amount::new(
                (monitor_config.max_concurrent_trades as f64 * monitor_config.min_liquidity * 1_000_000_000.0) as u64,
                9
            ),
            max_daily_loss: crate::shared::types::Amount::new(
                (monitor_config.initial_balance_sol * 0.2 * 1_000_000_000.0) as u64, // 20% –æ—Ç –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞ (–±—ã–ª–æ 10%)
                9
            ),
            max_concurrent_trades: monitor_config.max_concurrent_trades,
            min_profit_threshold: monitor_config.min_profit_threshold,
            max_slippage_tolerance: 0.10, // 10% (–±—ã–ª–æ 5%)
            max_risk_score: 0.8, // 80% (–±—ã–ª–æ 70%)
            min_confidence_score: 0.4, // 40% (–±—ã–ª–æ 60%)
            cooldown_period_ms: 500, // 0.5 —Å–µ–∫—É–Ω–¥—ã (–±—ã–ª–æ 1 —Å–µ–∫—É–Ω–¥–∞)
        };

        let arbitrage_executor = ArbitrageTransactionExecutor::new(
            real_executor,
            risk_config,
            crate::shared::types::Amount::new(
                (monitor_config.initial_balance_sol * 1_000_000_000.0) as u64,
                9
            ),
        );

        Ok(Self {
            config: monitor_config,
            grpc_client,
            opportunity_detector,
            dex_factory,
            rpc_client: rpc_client.clone(),
            arbitrage_executor,
            token_metadata: Arc::new(crate::infrastructure::blockchain::TokenMetadataService::new(rpc_client)),
            stats: Arc::new(RwLock::new(MonitorStats::new())),
            active_trades: Arc::new(RwLock::new(HashMap::new())),
            price_cache: Arc::new(RwLock::new(HashMap::new())),
        })
    }

    /// –ó–∞–ø—É—Å—Ç–∏—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    pub async fn run_monitoring_loop(&mut self) -> Result<(), AppError> {
        info!("üöÄ –ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞...");
        
        // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        self.create_test_pools().await;
        
        let start_time = std::time::Instant::now();
        let mut last_stats_print = start_time;
        
        loop {
            let cycle_start = std::time::Instant::now();
            
            // –í—ã–ø–æ–ª–Ω—è–µ–º —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            self.perform_monitoring_cycle().await?;
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            {
                let mut stats = self.stats.write().await;
                stats.transactions_processed += 1;
                stats.last_update = std::time::Instant::now();
            }
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
            if cycle_start.duration_since(last_stats_print).as_secs() >= 30 {
                self.print_monitor_stats().await;
                last_stats_print = cycle_start;
            }
            
            // –ñ–¥–µ–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ü–∏–∫–ª–∞
            let cycle_duration = cycle_start.elapsed();
            if cycle_duration < std::time::Duration::from_millis(self.config.update_interval_ms) {
                let sleep_duration = std::time::Duration::from_millis(self.config.update_interval_ms) - cycle_duration;
                tokio::time::sleep(sleep_duration).await;
            }
        }
    }

    /// –í—ã–ø–æ–ª–Ω–∏—Ç—å –æ–¥–∏–Ω —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    async fn perform_monitoring_cycle(&mut self) -> Result<(), AppError> {
        // –ò—â–µ–º –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        let test_price_data = vec![
            // SOL -> USDC –Ω–∞ Orca
            PriceData {
                token_mint: "EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v".to_string(), // USDC
                dex_type: crate::domain::dex::DexType::OrcaWhirlpool,
                pool_id: "orca_sol_usdc_test".to_string(),
                price: 0.00098, // 1 SOL = 98 USDC
                liquidity: crate::shared::types::Amount::new(1000000000000, 9), // 1000 SOL
                volume_24h: Some(1000000.0),
                price_change_24h: Some(0.01),
                timestamp: std::time::Instant::now(),
            },
            // SOL -> USDC –Ω–∞ Raydium
            PriceData {
                token_mint: "EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v".to_string(), // USDC
                dex_type: crate::domain::dex::DexType::RaydiumAMM,
                pool_id: "raydium_sol_usdc_test".to_string(),
                price: 0.00100, // 1 SOL = 100 USDC
                liquidity: crate::shared::types::Amount::new(800000000000, 9), // 800 SOL
                volume_24h: Some(800000.0),
                price_change_24h: Some(0.02),
                timestamp: std::time::Instant::now(),
            },
        ];
        
        // –ò—â–µ–º –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã
        let routes = self.opportunity_detector.find_arbitrage_routes(&test_price_data).await;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        {
            let mut stats = self.stats.write().await;
            stats.opportunities_found += routes.len() as u64;
        }
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
        for route in routes {
            info!("üéØ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—É—é –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å: {}", route.id);
            
            if let Err(e) = self.process_arbitrage_opportunity(route).await {
                error!("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞: {}", e);
            }
        }
        
        Ok(())
    }

    /// –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ —Ü–µ–Ω–∞—Ö
    async fn get_current_price_data(&self) -> Result<Vec<PriceData>, AppError> {
        let mut price_data = Vec::new();
        
        // –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—ã –∏–∑ –∫—ç—à–∞
        let cache = self.price_cache.read().await;
        for (_token_mint, price) in cache.iter() {
            price_data.push(price.clone());
        }

        // –ï—Å–ª–∏ –∫—ç—à –ø—É—Å—Ç, —Å–∏–º—É–ª–∏—Ä—É–µ–º –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Ü–µ–Ω—ã –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        if price_data.is_empty() {
            price_data = self.generate_demo_price_data().await;
        }

        Ok(price_data)
    }

    /// –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–µ–º–æ –¥–∞–Ω–Ω—ã–µ –æ —Ü–µ–Ω–∞—Ö
    async fn generate_demo_price_data(&self) -> Vec<PriceData> {
        let mut price_data = Vec::new();
        
        // –°–∏–º—É–ª–∏—Ä—É–µ–º —Ü–µ–Ω—ã SOL –Ω–∞ —Ä–∞–∑–Ω—ã—Ö DEX
        let sol_prices = vec![
            ("Orca Whirlpool", 100.0, "whirLbMiicVdio4qvUfM5KAg6Ct8VwpYzGff3uctyCc"),
            ("Raydium V4", 98.5, "675kPX9MHTjS2zt1qfr1NYHuzeLXfQM9H24wFSUt1Mp8"),
        ];

        for (dex_name, price, program_id) in sol_prices {
            let dex_type = if dex_name.contains("Orca") { 
                DexType::OrcaWhirlpool 
            } else { 
                DexType::RaydiumAMM 
            };

            price_data.push(PriceData {
                token_mint: "SOL".to_string(),
                price,
                dex_type,
                pool_id: program_id.to_string(),
                timestamp: Instant::now(),
                liquidity: crate::shared::types::Amount::new(1000000000, 9), // 1 SOL
                volume_24h: Some(1000000.0), // 1M USD
                price_change_24h: Some(0.01), // 1%
            });
        }

        price_data
    }

    /// –°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞
    async fn create_test_pools(&self) {
        info!("üß™ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø—É–ª–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞...");
        
        // SOL -> USDC –Ω–∞ Orca
        let sol_usdc_orca = PriceData {
            token_mint: "EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v".to_string(), // USDC
            dex_type: crate::domain::dex::DexType::OrcaWhirlpool,
            pool_id: "orca_sol_usdc_test".to_string(),
            price: 0.00098, // 1 SOL = 98 USDC
            liquidity: crate::shared::types::Amount::new(1000000000000, 9), // 1000 SOL
            volume_24h: Some(1000000.0),
            price_change_24h: Some(0.01),
            timestamp: std::time::Instant::now(),
        };
        
        // SOL -> USDC –Ω–∞ Raydium
        let sol_usdc_raydium = PriceData {
            token_mint: "EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v".to_string(), // USDC
            dex_type: crate::domain::dex::DexType::RaydiumAMM,
            pool_id: "raydium_sol_usdc_test".to_string(),
            price: 0.00100, // 1 SOL = 100 USDC (–Ω–µ–º–Ω–æ–≥–æ –¥–æ—Ä–æ–∂–µ)
            liquidity: crate::shared::types::Amount::new(800000000000, 9), // 800 SOL
            volume_24h: Some(800000.0),
            price_change_24h: Some(0.02),
            timestamp: std::time::Instant::now(),
        };
        
        // USDC -> SOL –Ω–∞ Orca (–æ–±—Ä–∞—Ç–Ω–∞—è —Ü–µ–Ω–∞)
        let usdc_sol_orca = PriceData {
            token_mint: "111111111111111111111111111111111111111111111111111111111111111111".to_string(), // SOL
            dex_type: crate::domain::dex::DexType::OrcaWhirlpool,
            pool_id: "orca_usdc_sol_test".to_string(),
            price: 1.0 / 0.00098, // 1 USDC = 1/98 SOL
            liquidity: crate::shared::types::Amount::new(98000000000, 6), // 98M USDC
            volume_24h: Some(1000000.0),
            price_change_24h: Some(0.01),
            timestamp: std::time::Instant::now(),
        };
        
        // USDC -> SOL –Ω–∞ Raydium (–æ–±—Ä–∞—Ç–Ω–∞—è —Ü–µ–Ω–∞)
        let usdc_sol_raydium = PriceData {
            token_mint: "111111111111111111111111111111111111111111111111111111111111111111".to_string(), // SOL
            dex_type: crate::domain::dex::DexType::RaydiumAMM,
            pool_id: "raydium_usdc_sol_test".to_string(),
            price: 1.0 / 0.00100, // 1 USDC = 1/100 SOL
            liquidity: crate::shared::types::Amount::new(100000000000, 6), // 100M USDC
            volume_24h: Some(800000.0),
            price_change_24h: Some(0.02),
            timestamp: std::time::Instant::now(),
        };
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤ –¥–µ—Ç–µ–∫—Ç–æ—Ä
        self.opportunity_detector.update_price_cache(sol_usdc_orca).await;
        self.opportunity_detector.update_price_cache(sol_usdc_raydium).await;
        self.opportunity_detector.update_price_cache(usdc_sol_orca).await;
        self.opportunity_detector.update_price_cache(usdc_sol_raydium).await;
        
        info!("‚úÖ –°–æ–∑–¥–∞–Ω–æ 4 —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø—É–ª–∞: SOL‚ÜîUSDC –Ω–∞ Orca –∏ Raydium");
        info!("   üí∞ –¶–µ–Ω—ã: Orca: 1 SOL = 98 USDC, Raydium: 1 SOL = 100 USDC");
        info!("   üéØ –û–∂–∏–¥–∞–µ–º—ã–π –∞—Ä–±–∏—Ç—Ä–∞–∂: SOL ‚Üí USDC –Ω–∞ Orca ‚Üí USDC ‚Üí SOL –Ω–∞ Raydium");
    }

    /// –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞–π–¥–µ–Ω–Ω—É—é –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—É—é –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å
    async fn process_arbitrage_opportunity(&mut self, route: ArbitrageRoute) -> Result<(), AppError> {
        // –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–Ω—è—Ç–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞
        let route_description = if route.steps.len() >= 2 {
            let mut description = String::new();
            
            for (i, step) in route.steps.iter().enumerate() {
                let token_in_symbol = self.token_metadata.get_token_symbol(&step.token_in.mint.to_string()).await;
                let token_out_symbol = self.token_metadata.get_token_symbol(&step.token_out.mint.to_string()).await;
                let dex_name = match step.dex_type {
                    crate::domain::dex::DexType::OrcaWhirlpool => "Orca Whirlpool",
                    crate::domain::dex::DexType::RaydiumAMM => "Raydium AMM",
                    _ => "Unknown DEX",
                };
                
                if i > 0 {
                    description.push_str(" ‚Üí ");
                }
                description.push_str(&format!("{}/{} –Ω–∞ {}", token_in_symbol, token_out_symbol, dex_name));
            }
            
            // –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–∑–≤—Ä–∞—Ç –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É —Ç–æ–∫–µ–Ω—É
            if let Some(first_step) = route.steps.first() {
                let first_token_symbol = self.token_metadata.get_token_symbol(&first_step.token_in.mint.to_string()).await;
                description.push_str(&format!(" ‚Üí {}", first_token_symbol));
            }
            
            description
        } else {
            "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —à–∞–≥–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è".to_string()
        };
        
        info!("\nüéØ –ù–∞–π–¥–µ–Ω–∞ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å!");
        info!("   –ú–∞—Ä—à—Ä—É—Ç: {}", route_description);
        info!("   –ü—Ä–∏–±—ã–ª—å: {:.2}%", route.profit_percentage * 100.0);
        info!("   –û—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–∞: {:.2}", route.risk_score);
        info!("   –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {:.2}", route.confidence_score);
        info!("   –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {:.0} –º—Å", route.execution_time_estimate.as_millis());
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–∞–∫–∞—è —Å–¥–µ–ª–∫–∞ —É–∂–µ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è
        let active_trades = self.active_trades.read().await;
        if active_trades.contains_key(&route.id) {
            warn!("   ‚ö†Ô∏è  –°–¥–µ–ª–∫–∞ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º");
            return Ok(());
        }
        drop(active_trades);

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        {
            let mut stats = self.stats.write().await;
            stats.opportunities_found += 1;
        }

        // –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ, –≤—ã–ø–æ–ª–Ω—è–µ–º —Å–¥–µ–ª–∫—É
        if self.config.enable_auto_execution {
            info!("   üöÄ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ...");
            
            // –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å—á–µ—Ç –ø—Ä–∏–±—ã–ª–∏
            let profit_calc = ProfitCalculation {
                gross_profit: route.expected_profit,
                net_profit: route.expected_profit - (route.total_cost.value as f64 / 1_000_000_000.0),
                gas_cost: route.total_cost.clone(),
                slippage_cost: route.steps.iter().map(|s| s.slippage_estimate).sum(),
                fee_cost: route.steps.iter().map(|s| s.fee.value as f64 / 1_000_000_000.0).sum(),
                profit_margin: route.profit_percentage,
                is_profitable: route.profit_percentage > 0.0,
                roi_percentage: route.profit_percentage,
                break_even_amount: 0.0,
            };

            match self.arbitrage_executor.execute_arbitrage_opportunity(&route, &profit_calc).await {
                Ok(result) => {
                    info!("   ‚úÖ –°–¥–µ–ª–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!");
                    info!("      ID: {}", route.id);
                    info!("      –£—Å–ø–µ—Ö: {}", result.success);
                    if let Some(signature) = &result.signature {
                        info!("      –ü–æ–¥–ø–∏—Å—å: {}", signature);
                    }
                    
                    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —É—Å–ø–µ—à–Ω–æ–π —Å–¥–µ–ª–∫–∏
                    {
                        let mut stats = self.stats.write().await;
                        stats.trades_executed += 1;
                        stats.successful_trades += 1;
                        stats.total_profit += profit_calc.net_profit;
                    }
                    
                    // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–¥–µ–ª–∫–∏
                    {
                        let mut active_trades = self.active_trades.write().await;
                        active_trades.insert(route.id.clone(), route.clone());
                    }
                }
                Err(e) => {
                    error!("   ‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏: {}", e);
                    
                    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –Ω–µ—É–¥–∞—á–Ω–æ–π —Å–¥–µ–ª–∫–∏
                    {
                        let mut stats = self.stats.write().await;
                        stats.failed_trades += 1;
                    }
                }
            }
        } else {
            warn!("   ‚è∏Ô∏è  –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ");
            
            // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–¥–µ–ª–∫–∏ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è
            {
                let mut active_trades = self.active_trades.write().await;
                active_trades.insert(route.id.clone(), route.clone());
            }
        }

        Ok(())
    }

    /// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –º–æ–∂–Ω–æ –ª–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Å–¥–µ–ª–∫—É
    async fn can_execute_trade(&self, route: &ArbitrageRoute) -> bool {
        let active_trades = self.active_trades.read().await;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–¥–µ–ª–æ–∫
        if active_trades.len() >= self.config.max_concurrent_trades {
            return false;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–∞–∫–∞—è —Å–¥–µ–ª–∫–∞ —É–∂–µ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è
        if active_trades.contains_key(&route.id) {
            return false;
        }

        true
    }

    /// –í—ã–≤–µ—Å—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    async fn print_monitor_stats(&self) {
        let stats = self.stats.read().await;
        let (success_rate, roi, net_profit_sol) = self.arbitrage_executor.get_performance_metrics().await;
        
        info!("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:");
        info!("   –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {:.1} –º–∏–Ω", stats.get_uptime().as_secs_f64() / 60.0);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–Ω—É–ª–µ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        if stats.transactions_processed > 0 {
            info!("   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {}", stats.transactions_processed);
        }
        if stats.opportunities_found > 0 {
            info!("   –ù–∞–π–¥–µ–Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π: {}", stats.opportunities_found);
        }
        if stats.trades_executed > 0 {
            info!("   –í—ã–ø–æ–ª–Ω–µ–Ω–æ —Å–¥–µ–ª–æ–∫: {}", stats.trades_executed);
        }
        if stats.total_profit > 0.0 {
            info!("   –û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å: {:.4} SOL", stats.total_profit);
        }
        if stats.get_opportunities_per_minute() > 0.0 {
            info!("   –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π/–º–∏–Ω: {:.1}", stats.get_opportunities_per_minute());
        }
        
        info!("   –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {:.4} SOL", stats.current_balance_sol);
        
        if success_rate > 0.0 {
            info!("   –£—Å–ø–µ—à–Ω–æ—Å—Ç—å —Å–¥–µ–ª–æ–∫: {:.1}%", success_rate * 100.0);
        }
        if roi > 0.0 {
            info!("   ROI: {:.2}%", roi * 100.0);
        }
        if net_profit_sol > 0.0 {
            info!("   –ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å —Å–µ–≥–æ–¥–Ω—è: {:.4} SOL", net_profit_sol);
        }
        
        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–¥–µ–ª–æ–∫
        let active_trades = self.active_trades.read().await;
        if active_trades.len() > 0 {
            info!("   –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–¥–µ–ª–æ–∫: {}", active_trades.len());
        }
        
        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞ —Ü–µ–Ω
        let price_cache = self.price_cache.read().await;
        if price_cache.len() > 0 {
            info!("   –¢–æ–∫–µ–Ω–æ–≤ –≤ –∫—ç—à–µ: {}", price_cache.len());
        }
        
        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω–æ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
        let executor_trades = self.arbitrage_executor.get_active_trades().await;
        if executor_trades.len() > 0 {
            info!("   –°–¥–µ–ª–æ–∫ –≤ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–∏: {}", executor_trades.len());
        }
        
        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–æ–∫–µ–Ω-–º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
        let token_cache_size = self.token_metadata.get_cache_size().await;
        if token_cache_size > 0 {
            info!("   –¢–æ–∫–µ–Ω–æ–≤ –≤ –∫—ç—à–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö: {}", token_cache_size);
        }
        
        // –ü–æ–ª—É—á–∞–µ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        let today = chrono::Utc::now().date_naive();
        if let Some(daily_stats) = self.arbitrage_executor.get_daily_stats(today).await {
            if daily_stats.total_trades > 0 {
                info!("   üìà –î–Ω–µ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:");
                info!("      –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {}", daily_stats.total_trades);
                if daily_stats.successful_trades > 0 {
                    info!("      –£—Å–ø–µ—à–Ω—ã—Ö: {}", daily_stats.successful_trades);
                }
                if daily_stats.total_profit.value > 0 {
                    info!("      –ü—Ä–∏–±—ã–ª—å: {:.4} SOL", daily_stats.total_profit.value as f64 / 1_000_000_000.0);
                }
                if daily_stats.total_loss.value > 0 {
                    info!("      –£–±—ã—Ç–∫–∏: {:.4} SOL", daily_stats.total_loss.value as f64 / 1_000_000_000.0);
                }
                if daily_stats.net_profit.value != 0 {
                    info!("      –ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å: {:.4} SOL", daily_stats.net_profit.value as f64 / 1_000_000_000.0);
                }
            }
        }
        
        info!("");
    }

    /// –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    pub async fn get_stats(&self) -> MonitorStats {
        self.stats.read().await.clone()
    }

    /// –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–¥–µ–ª–∫–∏
    pub async fn get_active_trades(&self) -> Vec<ArbitrageRoute> {
        let active_trades = self.active_trades.read().await;
        active_trades.values().cloned().collect()
    }

    /// –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
    pub async fn stop(&self) -> Result<(), AppError> {
        info!("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∞...");
        
        // TODO: –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–∫—Ä—ã—Ç—å gRPC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        
        info!("‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
        Ok(())
    }
}

#[cfg(test)]
mod tests {
    use super::*;
    use crate::shared::types::BotConfig;

    #[tokio::test]
    async fn test_arbitrage_monitor_creation() {
        let config = BotConfig::default();
        let monitor_config = ArbitrageMonitorConfig::default();
        
        let monitor = ArbitrageMonitor::new(config, monitor_config);
        assert!(monitor.is_ok());
    }

    #[tokio::test]
    async fn test_monitor_stats() {
        let stats = MonitorStats::new();
        assert_eq!(stats.transactions_processed, 0);
        assert_eq!(stats.opportunities_found, 0);
        assert_eq!(stats.trades_executed, 0);
        assert_eq!(stats.total_profit, 0.0);
    }
}
