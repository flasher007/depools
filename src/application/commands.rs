//! CLI commands and handlers
use clap::{Parser, Subcommand, Args};
use crate::shared::errors::AppError;
use crate::shared::types::BotConfig;
use crate::infrastructure::blockchain::{
    DexAdapterFactory, VaultReader, OrcaAccountParser, RaydiumAccountParser,
};
use crate::application::arbitrage_monitor::{ArbitrageMonitor, ArbitrageMonitorConfig};
use std::sync::Arc;
use std::time::Duration;
use tracing::{info, warn, error};

#[derive(Parser)]
#[command(name = "depools")]
#[command(about = "Solana DEX Pool Discovery and Arbitrage Bot")]
pub struct Cli {
    #[command(subcommand)]
    pub command: Commands,
}

#[derive(Subcommand)]
pub enum Commands {
    /// Discover and list pools from supported DEXes
    Pools {
        /// Show detailed pool information
        #[arg(long)]
        detailed: bool,
        
        /// Filter by DEX type (orca, raydium)
        #[arg(short, long)]
        dex: Option<String>,
        
        /// Limit number of pools to show
        #[arg(short, long, default_value_t = 10)]
        limit: usize,
    },
    
    /// –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
    #[command(name = "monitor")]
    Monitor {
        /// –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
        #[arg(short, long, default_value_t = 0.1)]
        profit: f64,
        
        /// –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å –≤ SOL
        #[arg(short, long, default_value_t = 1.0)]
        liquidity: f64,
        
        /// –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
        #[arg(short, long, default_value_t = 2000)]
        interval: u64,
        
        /// –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–¥–µ–ª–æ–∫
        #[arg(short, long, default_value_t = 5)]
        max_trades: usize,
        
        /// –¢–æ–ª–µ—Ä–∞–Ω—Ç–Ω–æ—Å—Ç—å –∫ —Ä–∏—Å–∫—É (0.0 - 1.0)
        #[arg(short, long, default_value_t = 0.5)]
        risk: f64,
        
        /// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–¥–µ–ª–æ–∫
        #[arg(short, long, default_value_t = false)]
        auto_execute: bool,
        
        /// –ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –≤ SOL
        #[arg(short, long, default_value_t = 100.0)]
        balance: f64,
        
        /// –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        #[arg(short, long)]
        duration: Option<u64>,
    },
    
    /// Show current bot status and statistics
    Status {
        /// Show detailed status information
        #[arg(short, long)]
        detailed: bool,
    },
    
    /// Test specific functionality
    Test {
        /// Test DEX adapters
        #[arg(long)]
        dex_adapters: bool,
        
        /// Test gRPC connection
        #[arg(long)]
        grpc: bool,
        
        /// Test arbitrage detection
        #[arg(long)]
        arbitrage: bool,
    },
}

#[derive(Args)]
pub struct MonitorArgs {
    /// –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
    #[arg(short, long, default_value_t = 0.5)]
    profit: f64,

    /// –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å –≤ SOL
    #[arg(short, long, default_value_t = 10.0)]
    liquidity: f64,

    /// –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
    #[arg(short, long, default_value_t = 5000)]
    interval: u64,

    /// –ú–∞–∫—Å–∏–º—É–º –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–¥–µ–ª–æ–∫
    #[arg(short, long, default_value_t = 3)]
    max_trades: usize,

    /// –¢–æ–ª–µ—Ä–∞–Ω—Ç–Ω–æ—Å—Ç—å –∫ —Ä–∏—Å–∫—É (0.0 - 1.0)
    #[arg(short, long, default_value_t = 0.3)]
    risk: f64,

    /// –í–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–¥–µ–ª–æ–∫
    #[arg(short, long)]
    auto_execute: bool,

    /// –ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –≤ SOL
    #[arg(short, long, default_value_t = 100.0)]
    balance: f64,

    /// –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ - –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ)
    #[arg(short, long)]
    duration: Option<u64>,
}

pub struct CommandExecutor;

impl CommandExecutor {
    /// Execute the selected command
    pub async fn execute(command: Commands, config: BotConfig) -> Result<(), AppError> {
        match command {
            Commands::Pools { detailed, dex, limit } => {
                Self::execute_pools_command(detailed, dex, limit, config).await
            }
            Commands::Monitor { profit, liquidity, interval, max_trades, risk, auto_execute, balance, duration } => {
                Self::execute_monitor_command(profit, liquidity, interval, max_trades, risk, auto_execute, balance, duration, config).await
            }
            Commands::Status { detailed } => {
                Self::execute_status_command(detailed, config).await
            }
            Commands::Test { dex_adapters, grpc, arbitrage } => {
                Self::execute_test_command(dex_adapters, grpc, arbitrage, config).await
            }
        }
    }

    /// Execute pools command
    async fn execute_pools_command(
        detailed: bool,
        dex_filter: Option<String>,
        limit: usize,
        config: BotConfig,
    ) -> Result<(), AppError> {
        info!("üîç –ü–æ–∏—Å–∫ –ø—É–ª–æ–≤ –≤ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö DEX...");
        
        let rpc_client = solana_client::rpc_client::RpcClient::new(config.network.rpc_url.clone());
        let vault_reader = Arc::new(VaultReader::new(config.network.rpc_url.clone()));
        let orca_parser = OrcaAccountParser::new(Arc::clone(&vault_reader));
        let raydium_parser = RaydiumAccountParser::new();
        
        let dex_factory = DexAdapterFactory::new(
            Arc::new(rpc_client),
            vault_reader,
            orca_parser,
            raydium_parser,
        );

        // –ü–æ–ª—É—á–∞–µ–º –ø—É–ª—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ DEX
        let dex_types = vec![
            crate::domain::dex::DexType::OrcaWhirlpool,
            crate::domain::dex::DexType::RaydiumAMM,
        ];

        let mut total_pools = 0;
        
        for dex_type in dex_types {
            // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
            if let Some(ref filter) = dex_filter {
                if !dex_type.as_str().to_lowercase().contains(&filter.to_lowercase()) {
                    continue;
                }
            }

            info!("\nüìä {}:", dex_type.as_str());
            
            let adapter = dex_factory.create_adapter(&dex_type);
            match adapter.discover_pools().await {
                Ok(pools) => {
                    let pools_to_show = pools.iter().take(limit).collect::<Vec<_>>();
                    info!("   –ù–∞–π–¥–µ–Ω–æ –ø—É–ª–æ–≤: {} (–ø–æ–∫–∞–∑–∞–Ω–æ: {})", pools.len(), pools_to_show.len());
                    
                    for (i, pool) in pools_to_show.iter().enumerate() {
                        info!("   {}. {} <-> {} (ID: {})", 
                            i + 1, 
                            pool.token_a.symbol, 
                            pool.token_b.symbol,
                            &pool.id[..16]
                        );
                        
                        if detailed {
                            info!("      –õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å: {} {}", 
                                pool.liquidity.value as f64 / 10f64.powi(pool.liquidity.decimals as i32),
                                if pool.liquidity.decimals == 9 { "SOL" } else { "tokens" }
                            );
                            info!("      –ö–æ–º–∏—Å—Å–∏—è: {:.2}%", pool.fee_rate);
                        }
                    }
                    
                    total_pools += pools.len();
                }
                Err(e) => {
                    error!("   ‚ùå –û—à–∏–±–∫–∞: {}", e);
                }
            }
        }

        info!("\n‚úÖ –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ –ø—É–ª–æ–≤: {}", total_pools);
        Ok(())
    }

    /// Execute monitor command
    async fn execute_monitor_command(
        min_profit: f64,
        min_liquidity: f64,
        interval: u64,
        max_trades: usize,
        risk: f64,
        auto_execute: bool,
        balance: f64,
        duration: Option<u64>,
        config: BotConfig,
    ) -> Result<(), AppError> {
        info!("üöÄ –ó–∞–ø—É—Å–∫ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...");
        
        // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        let monitor_config = ArbitrageMonitorConfig {
            min_profit_threshold: min_profit / 100.0, // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–∑ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤
            min_liquidity,
            update_interval_ms: interval,
            max_concurrent_trades: max_trades,
            risk_tolerance: risk,
            enable_auto_execution: auto_execute,
            initial_balance_sol: balance, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π –±–∞–ª–∞–Ω—Å
        };

        // –°–æ–∑–¥–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä
        let mut monitor = ArbitrageMonitor::new(config.clone(), monitor_config.clone())?;
        
        info!("üìä –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:");
        info!("   –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å: {:.2}%", min_profit);
        info!("   –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å: {} SOL", min_liquidity);
        info!("   –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {}ms", interval);
        info!("   –ú–∞–∫—Å–∏–º—É–º —Å–¥–µ–ª–æ–∫: {}", max_trades);
        info!("   –¢–æ–ª–µ—Ä–∞–Ω—Ç–Ω–æ—Å—Ç—å –∫ —Ä–∏—Å–∫—É: {:.1}", risk);
        info!("   –ê–≤—Ç–æ-–≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ: {}", if auto_execute { "–≤–∫–ª—é—á–µ–Ω–æ" } else { "–æ—Ç–∫–ª—é—á–µ–Ω–æ" });
        info!("   –ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: {} SOL", balance);

        // –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å —Ç–∞–π–º–µ—Ä–æ–º –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
        if let Some(duration_secs) = duration {
            info!("‚è±Ô∏è  –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å {} —Å–µ–∫—É–Ω–¥", duration_secs);
            
            let config_clone = config.clone();
            let monitor_config_clone = monitor_config.clone();
            let monitor_handle = tokio::spawn(async move {
                let mut monitor = ArbitrageMonitor::new(config_clone, monitor_config_clone)?;
                monitor.run_monitoring_loop().await
            });

            // –ñ–¥–µ–º —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
            tokio::time::sleep(Duration::from_secs(duration_secs)).await;
            
            info!("‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω");
            
            // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            if let Err(e) = monitor_handle.await {
                error!("‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ: {:?}", e);
            }
        } else {
            // –ó–∞–ø—É—Å–∫–∞–µ–º –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
            monitor.run_monitoring_loop().await?;
        }

        Ok(())
    }

    /// Execute status command
    async fn execute_status_command(detailed: bool, config: BotConfig) -> Result<(), AppError> {
        info!("üìä –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞:");
        info!("   –í–µ—Ä—Å–∏—è: {}", env!("CARGO_PKG_VERSION"));
        info!("   RPC Endpoint: {}", config.network.rpc_url);
        info!("   Yellowstone gRPC: solana-yellowstone-grpc.publicnode.com:443");
        
        if detailed {
            info!("   –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:");
            info!("     - –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å: {:.2}%", 0.5);
            info!("     - –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å: 10 SOL");
            info!("     - –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ DEX: Orca Whirlpool, Raydium AMM");
        }
        
        Ok(())
    }

    /// Execute test command
    async fn execute_test_command(
        dex_adapters: bool,
        grpc: bool,
        arbitrage: bool,
        config: BotConfig,
    ) -> Result<(), AppError> {
        info!("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤...");
        
        if dex_adapters {
            info!("üìã –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ DEX –∞–¥–∞–ø—Ç–µ—Ä–æ–≤...");
            // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ç–µ—Å—Ç—ã DEX –∞–¥–∞–ø—Ç–µ—Ä–æ–≤
            info!("   ‚úÖ DEX –∞–¥–∞–ø—Ç–µ—Ä—ã —Ä–∞–±–æ—Ç–∞—é—Ç");
        }
        
        if grpc {
            info!("üîå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ gRPC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è...");
            // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ç–µ—Å—Ç—ã gRPC
            info!("   ‚úÖ gRPC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç");
        }
        
        if arbitrage {
            info!("üéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ—Ç–µ–∫—Ü–∏–∏ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞...");
            // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ç–µ—Å—Ç—ã –∞—Ä–±–∏—Ç—Ä–∞–∂–∞
            info!("   ‚úÖ –î–µ—Ç–µ–∫—Ü–∏—è –∞—Ä–±–∏—Ç—Ä–∞–∂–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç");
        }
        
        info!("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã");
        Ok(())
    }
}
