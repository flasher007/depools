use anyhow::Result;
use solana_sdk::pubkey::Pubkey;
use tracing::debug;

/// –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö –ø—É–ª–∞
pub struct DebugParser;

impl DebugParser {
    /// –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö –ø—É–ª–∞ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã
    pub fn analyze_pool_structure(data: &[u8]) -> Result<()> {
        debug!("üîç Analyzing pool data structure ({} bytes)", data.len());
        
        // –ò—â–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ Pubkey (32 –±–∞–π—Ç–∞)
        let mut pubkeys = Vec::new();
        for i in (0..data.len()).step_by(32) {
            if i + 32 <= data.len() {
                let pubkey = Pubkey::try_from(&data[i..i + 32])?;
                pubkeys.push((i, pubkey));
            }
        }
        
        debug!("üìã Found {} potential Pubkeys:", pubkeys.len());
        for (pos, pubkey) in pubkeys.iter().take(10) { // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
            debug!("  Position {}: {}", pos, pubkey);
        }
        
        // –ò—â–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ–∑–µ—Ä–≤—ã (u64 –≤ little-endian)
        let mut reserves = Vec::new();
        for i in (0..data.len()).step_by(8) {
            if i + 8 <= data.len() {
                let reserve = u64::from_le_bytes([
                    data[i], data[i + 1], data[i + 2], data[i + 3],
                    data[i + 4], data[i + 5], data[i + 6], data[i + 7]
                ]);
                if reserve > 0 && reserve < 1_000_000_000_000_000_000 { // –†–∞–∑—É–º–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                    reserves.push((i, reserve));
                }
            }
        }
        
        debug!("üí∞ Found {} potential reserves:", reserves.len());
        for (pos, reserve) in reserves.iter().take(10) { // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
            debug!("  Position {}: {}", pos, reserve);
        }
        
        // –ò—â–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –∫–æ–º–∏—Å—Å–∏–∏ (u32 –≤ little-endian)
        let mut fees = Vec::new();
        for i in (0..data.len()).step_by(4) {
            if i + 4 <= data.len() {
                let fee = u32::from_le_bytes([
                    data[i], data[i + 1], data[i + 2], data[i + 3]
                ]);
                if fee > 0 && fee < 10000 { // –†–∞–∑—É–º–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è bps
                    fees.push((i, fee));
                }
            }
        }
        
        debug!("üí∏ Found {} potential fees:", fees.len());
        for (pos, fee) in fees.iter().take(10) { // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
            debug!("  Position {}: {} bps", pos, fee);
        }
        
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–æ–º–∏—Å—Å–∏–π –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–æ
        debug!("üîç Analyzing fee structure:");
        for i in (0..data.len()).step_by(4) {
            if i + 4 <= data.len() {
                let fee = u32::from_le_bytes([
                    data[i], data[i + 1], data[i + 2], data[i + 3]
                ]);
                // –ò—â–µ–º —Ä–∞–∑—É–º–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∫–æ–º–∏—Å—Å–∏–π (0.01% - 10%)
                if fee >= 1 && fee <= 1000 {
                    debug!("  Position {}: {} bps (0.{}%)", i, fee, fee as f64 / 100.0);
                }
            }
        }
        
        Ok(())
    }
}
