use anyhow::Result;
use solana_sdk::pubkey::Pubkey;
use crate::exchanges::types::{TokenInfo, PoolReserves, PoolFees};
use tracing::debug;

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤
const KNOWN_TOKENS: &[(&str, &str, u8)] = &[
    // SOL variants
    ("So11111111111111111111111111111111111111112", "SOL", 9),
    ("11111111111111111111111111111111", "SOL", 9),
    
    // USDC
    ("EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v", "USDC", 6),
    
    // USDT
    ("Es9vMFrzaCERmJfrF4H2FYD4KCoNkY11McCe8BenwNYB", "USDT", 6),
    
    // RAY
    ("4k3Dyjzvzp8eMZWUXbBCjEvwSkkk59S5iCNLY3QrkX6R", "RAY", 6),
];

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –ø–æ mint –∞–¥—Ä–µ—Å—É
fn get_token_info(mint: &str) -> Option<(&str, u8)> {
    KNOWN_TOKENS.iter()
        .find(|(addr, _, _)| *addr == mint)
        .map(|(_, symbol, decimals)| (*symbol, *decimals))
}

/// –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö –ø—É–ª–∞
pub struct DebugParser;

impl DebugParser {
    /// –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö –ø—É–ª–∞ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã
    pub fn analyze_pool_structure(data: &[u8]) -> Result<()> {
        debug!("üîç Analyzing pool data structure ({} bytes)", data.len());
        
        // –ò—â–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ Pubkey (32 –±–∞–π—Ç–∞)
        let mut pubkeys = Vec::new();
        for i in (0..data.len()).step_by(32) {
            if i + 32 <= data.len() {
                let pubkey = Pubkey::try_from(&data[i..i + 32])?;
                pubkeys.push((i, pubkey));
            }
        }
        
        debug!("üìã Found {} potential Pubkeys:", pubkeys.len());
        for (pos, pubkey) in pubkeys.iter().take(10) { // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
            debug!("  Position {}: {}", pos, pubkey);
        }
        
        // –ò—â–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ–∑–µ—Ä–≤—ã (u64 –≤ little-endian)
        let mut reserves = Vec::new();
        for i in (0..data.len()).step_by(8) {
            if i + 8 <= data.len() {
                let reserve = u64::from_le_bytes([
                    data[i], data[i + 1], data[i + 2], data[i + 3],
                    data[i + 4], data[i + 5], data[i + 6], data[i + 7]
                ]);
                if reserve > 0 && reserve < 1_000_000_000_000_000_000 { // –†–∞–∑—É–º–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                    reserves.push((i, reserve));
                }
            }
        }
        
        debug!("üí∞ Found {} potential reserves:", reserves.len());
        for (pos, reserve) in reserves.iter().take(10) { // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
            debug!("  Position {}: {}", pos, reserve);
        }
        
        // –ò—â–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –∫–æ–º–∏—Å—Å–∏–∏ (u32 –≤ little-endian)
        let mut fees = Vec::new();
        for i in (0..data.len()).step_by(4) {
            if i + 4 <= data.len() {
                let fee = u32::from_le_bytes([
                    data[i], data[i + 1], data[i + 2], data[i + 3]
                ]);
                if fee > 0 && fee < 10000 { // –†–∞–∑—É–º–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è bps
                    fees.push((i, fee));
                }
            }
        }
        
        debug!("üí∏ Found {} potential fees:", fees.len());
        for (pos, fee) in fees.iter().take(10) { // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
            debug!("  Position {}: {} bps", pos, fee);
        }
        
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–æ–º–∏—Å—Å–∏–π –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–æ
        debug!("üîç Analyzing fee structure:");
        for i in (0..data.len()).step_by(4) {
            if i + 4 <= data.len() {
                let fee = u32::from_le_bytes([
                    data[i], data[i + 1], data[i + 2], data[i + 3]
                ]);
                // –ò—â–µ–º —Ä–∞–∑—É–º–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∫–æ–º–∏—Å—Å–∏–π (0.01% - 10%)
                if fee >= 1 && fee <= 1000 {
                    debug!("  Position {}: {} bps (0.{}%)", i, fee, fee as f64 / 100.0);
                }
            }
        }
        
        Ok(())
    }
}

/// –ü–∞—Ä—Å–µ—Ä –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –ø—É–ª–∞ Raydium V4
pub struct RaydiumV4Parser;

impl RaydiumV4Parser {
    /// –ü–∞—Ä—Å–∏—Ç –¥–∞–Ω–Ω—ã–µ –ø—É–ª–∞ Raydium V4
    /// –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è SOL-USDC –ø—É–ª–æ–≤
    pub fn parse_pool_data(
        data: &[u8],
        base_token_mint: &str,
        base_token_symbol: &str,
        base_token_decimals: u8,
        quote_token_mint: &str,
        quote_token_symbol: &str,
        quote_token_decimals: u8,
    ) -> Result<(TokenInfo, TokenInfo, PoolReserves, PoolFees)> {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö
        if data.len() < 752 {
            return Err(anyhow::anyhow!("Invalid Raydium V4 pool data size: {} bytes", data.len()));
        }
        
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        DebugParser::analyze_pool_structure(data)?;
        
        // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –∏—â–µ–º —Ç–æ–∫–µ–Ω—ã –≤ –¥–∞–Ω–Ω—ã—Ö Raydium V4
        let mut token_positions: Vec<(usize, String, u8)> = Vec::new();
        
        // –ò—â–µ–º –∏–∑–≤–µ—Å—Ç–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã –≤–æ –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏—è—Ö
        
        for i in (0..data.len()).step_by(32) {
            if i + 32 <= data.len() {
                if let Ok(pubkey) = Pubkey::try_from(&data[i..i + 32]) {
                    let pubkey_str = pubkey.to_string();
                    if let Some((symbol, decimals)) = get_token_info(&pubkey_str) {
                        token_positions.push((i, symbol.to_string(), decimals));
                        debug!("üîç Found {} at position {} in Raydium V4", symbol, i);
                    }
                }
            }
        }
        
        // –ò—â–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã –¥–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è
        let mut token_a_mint_start = 0;
        let mut token_b_mint_start = 32;
        
        if let Some((pos, symbol, _)) = token_positions.get(0) {
            token_a_mint_start = *pos;
            
            // –ò—â–µ–º —Ç–æ–∫–µ–Ω —Å –¥—Ä—É–≥–∏–º —Å–∏–º–≤–æ–ª–æ–º
            if let Some((pos2, symbol2, _)) = token_positions.iter()
                .find(|(_, sym, _)| sym != symbol) {
                token_b_mint_start = *pos2;
                debug!("üîç Using different tokens: {} at pos {}, {} at pos {}", 
                        symbol, token_a_mint_start, symbol2, token_b_mint_start);
            } else {
                debug!("‚ö†Ô∏è  Only found one token type: {}", symbol);
            }
        }
        let token_a_vault_start = 64; // USDC vault
        let token_b_vault_start = 96; // SOL vault
        let reserve_a_start = 128;     // USDC reserve
        let reserve_b_start = 136;     // SOL reserve
        let lp_supply_start = 144;     // LP supply
        let fee_start = 144;           // Fees (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —Å 152 –Ω–∞ 144)
        
        let token_a_mint = Pubkey::try_from(&data[token_a_mint_start..token_a_mint_start + 32])?;
        let token_b_mint = Pubkey::try_from(&data[token_b_mint_start..token_b_mint_start + 32])?;
        
        // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        debug!("üîç DEBUG: token_a_mint = {} (position {})", token_a_mint, token_a_mint_start);
        debug!("üîç DEBUG: token_b_mint = {} (position {})", token_b_mint, token_b_mint_start);
        
        let token_a_vault = Pubkey::try_from(&data[token_a_vault_start..token_a_vault_start + 32])?;
        let token_b_vault = Pubkey::try_from(&data[token_b_vault_start..token_b_vault_start + 32])?;
        
        let token_a_reserve = u64::from_le_bytes([
            data[reserve_a_start], data[reserve_a_start + 1], data[reserve_a_start + 2], data[reserve_a_start + 3],
            data[reserve_a_start + 4], data[reserve_a_start + 5], data[reserve_a_start + 6], data[reserve_a_start + 7]
        ]);
        let token_b_reserve = u64::from_le_bytes([
            data[reserve_b_start], data[reserve_b_start + 1], data[reserve_b_start + 2], data[reserve_b_start + 3],
            data[reserve_b_start + 4], data[reserve_b_start + 5], data[reserve_b_start + 6], data[reserve_b_start + 7]
        ]);
        
        let lp_supply = u64::from_le_bytes([
            data[lp_supply_start], data[lp_supply_start + 1], data[lp_supply_start + 2], data[lp_supply_start + 3],
            data[lp_supply_start + 4], data[lp_supply_start + 5], data[lp_supply_start + 6], data[lp_supply_start + 7]
        ]);
        
        let trade_fee_bps = u32::from_le_bytes([
            data[fee_start], data[fee_start + 1], data[fee_start + 2], data[fee_start + 3]
        ]);
        let owner_trade_fee_bps = u32::from_le_bytes([
            data[fee_start + 4], data[fee_start + 5], data[fee_start + 6], data[fee_start + 7]
        ]);
        let owner_withdraw_fee_bps = u32::from_le_bytes([
            data[fee_start + 8], data[fee_start + 9], data[fee_start + 10], data[fee_start + 11]
        ]);
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–æ–π —Ç–æ–∫–µ–Ω SOL, –∫–∞–∫–æ–π USDC
        // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º mint –∞–¥—Ä–µ—Å–∞ —Å –∏–∑–≤–µ—Å—Ç–Ω—ã–º–∏ —Ç–æ–∫–µ–Ω–∞–º–∏
        let token_a_mint_str = token_a_mint.to_string();
        let token_b_mint_str = token_b_mint.to_string();
        
        let (token_a_symbol, token_a_decimals) = if token_a_mint_str == "So11111111111111111111111111111111111111112" || 
                                                   token_a_mint_str == "11111111111111111111111111111111" ||
                                                   token_a_mint_str == "11111111111111112GUYsqKrFZU73SvLFXevgF" {
            ("SOL".to_string(), 9)
        } else if token_a_mint_str == "EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v" {
            ("USDC".to_string(), 6)
        } else {
            // –ï—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ–º —Ç–æ–∫–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            if token_a_mint_str == base_token_mint {
                (base_token_symbol.to_string(), base_token_decimals)
            } else {
                (quote_token_symbol.to_string(), quote_token_decimals)
            }
        };
        
        let (token_b_symbol, token_b_decimals) = if token_b_mint_str == "So11111111111111111111111111111111111111112" || 
                                                   token_b_mint_str == "11111111111111111111111111111111" ||
                                                   token_b_mint_str == "11111111111111112GUYsqKrFZU73SvLFXevgF" {
            ("SOL".to_string(), 9)
        } else if token_b_mint_str == "EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v" {
            ("USDC".to_string(), 6)
        } else {
            // –ï—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ–º —Ç–æ–∫–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            if token_b_mint_str == base_token_mint {
                (base_token_symbol.to_string(), base_token_decimals)
            } else {
                (quote_token_symbol.to_string(), quote_token_decimals)
            }
        };
        
        // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        debug!("üîç DEBUG: token_a_mint_str = '{}'", token_a_mint_str);
        debug!("üîç DEBUG: token_b_mint_str = '{}'", token_b_mint_str);
        debug!("üîç DEBUG: SOL mint = 'So11111111111111111111111111111111111111112'");
        debug!("üîç DEBUG: USDC mint = 'EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v'");
        debug!("üîç DEBUG: token_a = {} ({}), token_b = {} ({})", 
                token_a_symbol, token_a_mint, token_b_symbol, token_b_mint);
        
        let token_a = TokenInfo {
            mint: token_a_mint,
            symbol: token_a_symbol,
            decimals: token_a_decimals,
            vault: token_a_vault,
        };
        
        let token_b = TokenInfo {
            mint: token_b_mint,
            symbol: token_b_symbol,
            decimals: token_b_decimals,
            vault: token_b_vault,
        };
        
        let reserves = PoolReserves {
            token_a_reserve,
            token_b_reserve,
            lp_supply: Some(lp_supply),
        };
        
        let fees = PoolFees {
            trade_fee_bps,
            owner_trade_fee_bps,
            owner_withdraw_fee_bps,
        };
        
        Ok((token_a, token_b, reserves, fees))
    }
}

/// –ü–∞—Ä—Å–µ—Ä –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –ø—É–ª–∞ Orca Whirlpool
pub struct OrcaWhirlpoolParser;

impl OrcaWhirlpoolParser {
    /// –ü–∞—Ä—Å–∏—Ç –¥–∞–Ω–Ω—ã–µ –ø—É–ª–∞ Orca Whirlpool
    /// –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è SOL-USDC –ø—É–ª–æ–≤
    pub fn parse_pool_data(
        data: &[u8],
        base_token_mint: &str,
        base_token_symbol: &str,
        base_token_decimals: u8,
        quote_token_mint: &str,
        quote_token_symbol: &str,
        quote_token_decimals: u8,
    ) -> Result<(TokenInfo, TokenInfo, PoolReserves, PoolFees)> {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö
        if data.len() < 653 {
            return Err(anyhow::anyhow!("Invalid Orca Whirlpool data size: {} bytes", data.len()));
        }
        
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        DebugParser::analyze_pool_structure(data)?;
        
        // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –∏—â–µ–º —Ç–æ–∫–µ–Ω—ã –≤ –¥–∞–Ω–Ω—ã—Ö Orca Whirlpool
        let mut sol_position = None;
        let mut usdc_position = None;
        
        // –ò—â–µ–º SOL –∏ USDC –≤–æ –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏—è—Ö
        for i in (0..data.len()).step_by(32) {
            if i + 32 <= data.len() {
                if let Ok(pubkey) = Pubkey::try_from(&data[i..i + 32]) {
                    let pubkey_str = pubkey.to_string();
                    if pubkey_str == "So11111111111111111111111111111111111111112" ||
                       pubkey_str == "11111111111111111111111111111111" ||
                       pubkey_str == "11111111111111112GUYsqKrFZU73SvLFXevgF" {
                        sol_position = Some(i);
                        debug!("üîç Found SOL at position {} in Orca Whirlpool", i);
                    } else if pubkey_str == "EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v" {
                        usdc_position = Some(i);
                        debug!("üîç Found USDC at position {} in Orca Whirlpool", i);
                    }
                }
            }
        }
        
        // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø–æ—Ä—è–¥–æ–∫: –≤—Å–µ–≥–¥–∞ SOL –ø–µ—Ä–≤—ã–π, USDC –≤—Ç–æ—Ä–æ–π
        let token_a_mint_start = sol_position.unwrap_or(0);    // SOL –≤—Å–µ–≥–¥–∞ –ø–µ—Ä–≤—ã–π
        let token_b_mint_start = usdc_position.unwrap_or(32); // USDC –≤—Å–µ–≥–¥–∞ –≤—Ç–æ—Ä–æ–π
        let token_a_vault_start = 64; // SOL vault
        let token_b_vault_start = 96; // USDC vault
        let reserve_a_start = 128;    // SOL reserve
        let reserve_b_start = 136;    // USDC reserve
        let lp_supply_start = 144;    // LP supply
        let fee_start = 72;           // Fees (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —Å 152 –Ω–∞ 72)
        
        let token_a_mint = Pubkey::try_from(&data[token_a_mint_start..token_a_mint_start + 32])?;
        let token_b_mint = Pubkey::try_from(&data[token_b_mint_start..token_b_mint_start + 32])?;
        
        // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        debug!("üîç DEBUG: token_a_mint = {} (position {})", token_a_mint, token_a_mint_start);
        debug!("üîç DEBUG: token_b_mint = {} (position {})", token_b_mint, token_b_mint_start);
        
        let token_a_vault = Pubkey::try_from(&data[token_a_vault_start..token_a_vault_start + 32])?;
        let token_b_vault = Pubkey::try_from(&data[token_b_vault_start..token_b_vault_start + 32])?;
        
        let token_a_reserve = u64::from_le_bytes([
            data[reserve_a_start], data[reserve_a_start + 1], data[reserve_a_start + 2], data[reserve_a_start + 3],
            data[reserve_a_start + 4], data[reserve_a_start + 5], data[reserve_a_start + 6], data[reserve_a_start + 7]
        ]);
        let token_b_reserve = u64::from_le_bytes([
            data[reserve_b_start], data[reserve_b_start + 1], data[reserve_b_start + 2], data[reserve_b_start + 3],
            data[reserve_b_start + 4], data[reserve_b_start + 5], data[reserve_b_start + 6], data[reserve_b_start + 7]
        ]);
        
        let lp_supply = u64::from_le_bytes([
            data[lp_supply_start], data[lp_supply_start + 1], data[lp_supply_start + 2], data[lp_supply_start + 3],
            data[lp_supply_start + 4], data[lp_supply_start + 5], data[lp_supply_start + 6], data[lp_supply_start + 7]
        ]);
        
        let trade_fee_bps = u32::from_le_bytes([
            data[fee_start], data[fee_start + 1], data[fee_start + 2], data[fee_start + 3]
        ]);
        let owner_trade_fee_bps = u32::from_le_bytes([
            data[fee_start + 4], data[fee_start + 5], data[fee_start + 6], data[fee_start + 7]
        ]);
        let owner_withdraw_fee_bps = u32::from_le_bytes([
            data[fee_start + 8], data[fee_start + 9], data[fee_start + 10], data[fee_start + 11]
        ]);
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–æ–π —Ç–æ–∫–µ–Ω SOL, –∫–∞–∫–æ–π USDC
        // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º mint –∞–¥—Ä–µ—Å–∞ —Å –∏–∑–≤–µ—Å—Ç–Ω—ã–º–∏ —Ç–æ–∫–µ–Ω–∞–º–∏
        let token_a_mint_str = token_a_mint.to_string();
        let token_b_mint_str = token_b_mint.to_string();
        
        let (token_a_symbol, token_a_decimals) = if token_a_mint_str == "So11111111111111111111111111111111111111112" || 
                                                   token_a_mint_str == "11111111111111111111111111111111" ||
                                                   token_a_mint_str == "11111111111111112GUYsqKrFZU73SvLFXevgF" {
            ("SOL".to_string(), 9)
        } else if token_a_mint_str == "EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v" {
            ("USDC".to_string(), 6)
        } else {
            // –ï—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ–º —Ç–æ–∫–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            if token_a_mint_str == base_token_mint {
                (base_token_symbol.to_string(), base_token_decimals)
            } else {
                (quote_token_symbol.to_string(), quote_token_decimals)
            }
        };
        
        let (token_b_symbol, token_b_decimals) = if token_b_mint_str == "So11111111111111111111111111111111111111112" || 
                                                   token_b_mint_str == "11111111111111111111111111111111" ||
                                                   token_b_mint_str == "11111111111111112GUYsqKrFZU73SvLFXevgF" {
            ("SOL".to_string(), 9)
        } else if token_b_mint_str == "EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v" {
            ("USDC".to_string(), 6)
        } else {
            // –ï—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ–º —Ç–æ–∫–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            if token_b_mint_str == base_token_mint {
                (base_token_symbol.to_string(), base_token_decimals)
            } else {
                (quote_token_symbol.to_string(), quote_token_decimals)
            }
        };
        
        let token_a = TokenInfo {
            mint: token_a_mint,
            symbol: token_a_symbol,
            decimals: token_a_decimals,
            vault: token_a_vault,
        };
        
        let token_b = TokenInfo {
            mint: token_b_mint,
            symbol: token_b_symbol,
            decimals: token_b_decimals,
            vault: token_b_vault,
        };
        
        let reserves = PoolReserves {
            token_a_reserve,
            token_b_reserve,
            lp_supply: Some(lp_supply),
        };
        
        let fees = PoolFees {
            trade_fee_bps,
            owner_trade_fee_bps,
            owner_withdraw_fee_bps,
        };
        
        Ok((token_a, token_b, reserves, fees))
    }
}
