use crate::shared::errors::AppError;
use crate::shared::types::{Amount, Token};
use crate::domain::dex::{DexType, PoolInfo};
use crate::infrastructure::blockchain::TokenMetadataService;
use std::collections::{HashMap, HashSet};
use std::sync::Arc;
use std::time::{Duration, Instant};
use tokio::sync::RwLock;
use tracing::{info, warn, debug, error};

/// –ò–Ω–¥–µ–∫—Å –ø—É–ª–∞ –≤ –≥—Ä–∞—Ñ–µ
#[derive(Debug, Clone, PartialEq, Eq, Hash)]
pub struct PoolIndex(pub usize);

/// –ò–Ω–¥–µ–∫—Å —Ç–æ–∫–µ–Ω–∞ –≤ –≥—Ä–∞—Ñ–µ
#[derive(Debug, Clone, PartialEq, Eq, Hash)]
pub struct TokenIndex(pub usize);

/// –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—É–ª–µ –¥–ª—è –∞—Ä–±–∏—Ç—Ä–∞–∂–∞
#[derive(Debug, Clone)]
pub struct PoolQuote {
    pub pool_id: String,
    pub dex_type: DexType,
    pub token_a: String,
    pub token_b: String,
    pub price_a_to_b: f64,
    pub price_b_to_a: f64,
    pub liquidity: Amount,
    pub fee: Amount,
}

impl PoolQuote {
    pub fn get_name(&self) -> String {
        format!("{}_{}", self.dex_type.as_str(), self.pool_id)
    }
    
    /// –ü–æ–ª—É—á–∏—Ç—å –∫–æ—Ç–∏—Ä–æ–≤–∫—É –¥–ª—è –æ–±–º–µ–Ω–∞ amount_in —Ç–æ–∫–µ–Ω–∞ in –Ω–∞ —Ç–æ–∫–µ–Ω out
    pub fn get_quote_with_amounts_scaled(
        &self,
        amount_in: u64,
        mint_in: &str,
        mint_out: &str,
    ) -> u64 {
        if mint_in == self.token_a && mint_out == self.token_b {
            // A -> B
            (amount_in as f64 * self.price_a_to_b) as u64
        } else if mint_in == self.token_b && mint_out == self.token_a {
            // B -> A
            (amount_in as f64 * self.price_b_to_a) as u64
        } else {
            0 // –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø–∞—Ä–∞ —Ç–æ–∫–µ–Ω–æ–≤
        }
    }
}

/// –ì—Ä–∞—Ñ –ø—É–ª–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞
#[derive(Debug, Clone)]
pub struct PoolGraph(pub HashMap<TokenIndex, HashMap<TokenIndex, Vec<PoolQuote>>>);

impl PoolGraph {
    pub fn new() -> Self {
        Self(HashMap::new())
    }
    
    /// –î–æ–±–∞–≤–∏—Ç—å –ø—É–ª –≤ –≥—Ä–∞—Ñ
    pub fn add_pool(&mut self, token_a: usize, token_b: usize, pool: PoolQuote) {
        self.0.entry(TokenIndex(token_a)).or_insert_with(HashMap::new)
            .entry(TokenIndex(token_b)).or_insert_with(Vec::new)
            .push(pool.clone());
            
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        self.0.entry(TokenIndex(token_b)).or_insert_with(HashMap::new)
            .entry(TokenIndex(token_a)).or_insert_with(Vec::new)
            .push(pool);
    }
    
    /// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ø—É–ª—ã –º–µ–∂–¥—É –¥–≤—É–º—è —Ç–æ–∫–µ–Ω–∞–º–∏
    pub fn get_pools(&self, token_a: usize, token_b: usize) -> Option<&Vec<PoolQuote>> {
        self.0.get(&TokenIndex(token_a))
            .and_then(|edges| edges.get(&TokenIndex(token_b)))
    }
}

/// –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ü–µ–Ω–µ —Ç–æ–∫–µ–Ω–∞
#[derive(Debug, Clone)]
pub struct PriceData {
    pub token_mint: String,
    pub price: f64,
    pub dex_type: DexType,
    pub pool_id: String,
    pub timestamp: Instant,
    pub liquidity: Amount,
    pub volume_24h: Option<f64>, // 24-—á–∞—Å–æ–≤–æ–π –æ–±—ä–µ–º —Ç–æ—Ä–≥–æ–≤
    pub price_change_24h: Option<f64>, // –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –∑–∞ 24 —á–∞—Å–∞
}

/// –ê—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç
#[derive(Debug, Clone)]
pub struct ArbitrageRoute {
    pub id: String,
    pub steps: Vec<ArbitrageStep>,
    pub expected_profit: f64,
    pub profit_percentage: f64,
    pub total_cost: Amount,
    pub risk_score: f64,
    pub timestamp: Instant,
    pub confidence_score: f64, // –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ —Ä–∞—Å—á–µ—Ç–∞—Ö (0.0 - 1.0)
    pub execution_time_estimate: Duration, // –û—Ü–µ–Ω–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
}

/// –®–∞–≥ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞
#[derive(Debug, Clone)]
pub struct ArbitrageStep {
    pub dex_type: DexType,
    pub pool_id: String,
    pub token_in: Token,
    pub token_out: Token,
    pub amount_in: Amount,
    pub expected_amount_out: Amount,
    pub price_impact: f64,
    pub fee: Amount,
    pub slippage_estimate: f64, // –û—Ü–µ–Ω–∫–∞ –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏—è
    pub gas_estimate: Amount, // –û—Ü–µ–Ω–∫–∞ –≥–∞–∑–∞ –¥–ª—è —ç—Ç–æ–≥–æ —à–∞–≥–∞
}

/// –†–∞—Å—á–µ—Ç –ø—Ä–∏–±—ã–ª–∏
#[derive(Debug, Clone)]
pub struct ProfitCalculation {
    pub gross_profit: f64,
    pub net_profit: f64,
    pub gas_cost: Amount,
    pub slippage_cost: f64,
    pub fee_cost: f64,
    pub profit_margin: f64,
    pub is_profitable: bool,
    pub roi_percentage: f64, // ROI –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
    pub break_even_amount: f64, // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –±–µ–∑—É–±—ã—Ç–æ—á–Ω–æ—Å—Ç–∏
}

/// –î–µ—Ç–µ–∫—Ç–æ—Ä –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
#[derive(Clone)]
pub struct ArbitrageOpportunityDetector {
    min_profit_threshold: f64,
    min_liquidity: Amount,
    price_cache: Arc<RwLock<HashMap<String, Vec<PriceData>>>>,
    max_route_length: usize,
    risk_tolerance: f64,
    token_metadata: Arc<TokenMetadataService>,
    max_slippage: f64, // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –¥–æ–ø—É—Å—Ç–∏–º–æ–µ –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏–µ
    min_confidence_score: f64, // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ —Ä–∞—Å—á–µ—Ç–∞—Ö
    
    // –ù–æ–≤—ã–µ –ø–æ–ª—è –¥–ª—è –≥—Ä–∞—Ñ–∞ –ø—É–ª–æ–≤
    pool_graph: PoolGraph,
    token_mints: Vec<String>,
    token_to_index: HashMap<String, usize>,
}

impl ArbitrageOpportunityDetector {
    /// –°–æ–∑–¥–∞—Ç—å —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    pub fn new_default(token_metadata: Arc<TokenMetadataService>) -> Self {
        Self::new(
            0.001, // 0.1% –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å (–±—ã–ª–æ 0.5%)
            Amount::new(1000000000, 9), // 1 SOL –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å
            4, // –ú–∞–∫—Å–∏–º—É–º 4 —à–∞–≥–∞ –≤ –º–∞—Ä—à—Ä—É—Ç–µ
            0.5, // –í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫ (–±—ã–ª–æ 0.3)
            token_metadata,
        )
    }
    
    /// –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –¥–µ—Ç–µ–∫—Ç–æ—Ä
    pub fn new(
        min_profit_threshold: f64,
        min_liquidity: Amount,
        max_route_length: usize,
        risk_tolerance: f64,
        token_metadata: Arc<TokenMetadataService>,
    ) -> Self {
        Self {
            min_profit_threshold,
            min_liquidity,
            price_cache: Arc::new(RwLock::new(HashMap::new())),
            max_route_length,
            risk_tolerance,
            token_metadata,
            max_slippage: 0.10, // 10% –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏–µ (–±—ã–ª–æ 5%)
            min_confidence_score: 0.4, // 40% –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å (–±—ã–ª–æ 70%)
            
            // –ù–æ–≤—ã–µ –ø–æ–ª—è –¥–ª—è –≥—Ä–∞—Ñ–∞ –ø—É–ª–æ–≤
            pool_graph: PoolGraph::new(),
            token_mints: Vec::new(),
            token_to_index: HashMap::new(),
        }
    }

    /// –ü–æ–∏—Å–∫ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –∞–ª–≥–æ—Ä–∏—Ç–º–∞–º–∏
    pub async fn find_arbitrage_routes(&self, price_data: &[PriceData]) -> Vec<ArbitrageRoute> {
        info!("üîç –ü–æ–∏—Å–∫ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤...");
        
        // –°–Ω–∞—á–∞–ª–∞ –æ–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à —Ü–µ–Ω
        for price in price_data {
            self.update_price_cache(price.clone()).await;
        }
        
        // –°—Ç—Ä–æ–∏–º –≥—Ä–∞—Ñ –ø—É–ª–æ–≤ –∏–∑ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –∫—ç—à–∞
        let mut detector = self.clone();
        detector.build_pool_graph().await;
        
        if detector.token_mints.is_empty() {
            info!("‚ö†Ô∏è –ì—Ä–∞—Ñ –ø—É–ª–æ–≤ –Ω–µ –ø–æ—Å—Ç—Ä–æ–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–∏—Å–∫");
            return Vec::new();
        }
        
        let mut routes = Vec::new();
        let mut sent_arbs = HashSet::new();
        
        // –ò—â–µ–º –∞—Ä–±–∏—Ç—Ä–∞–∂ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ –∫–∞–∫ —Å—Ç–∞—Ä—Ç–æ–≤–æ–π —Ç–æ—á–∫–∏
        for start_mint_idx in 0..detector.token_mints.len() {
            let init_balance = 1000000000u64; // 1 SOL –≤ lamports
            
            detector.brute_force_search(
                start_mint_idx,
                init_balance,
                init_balance,
                vec![start_mint_idx],
                Vec::new(),
                &mut sent_arbs,
                &mut routes,
            );
        }
        
        info!("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∏—Å–∫–∞:");
        info!("   –í—Å–µ–≥–æ —Ç–æ–∫–µ–Ω–æ–≤ –≤ –≥—Ä–∞—Ñ–µ: {}", detector.token_mints.len());
        info!("   –ù–∞–π–¥–µ–Ω–æ –º–∞—Ä—à—Ä—É—Ç–æ–≤: {}", routes.len());
        
        // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç–∏, —Ä–∏—Å–∫—É –∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
        let initial_count = routes.len();
        routes.retain(|route| {
            let profitable = route.profit_percentage >= self.min_profit_threshold;
            let risk_acceptable = route.risk_score <= self.risk_tolerance;
            let confident = route.confidence_score >= self.min_confidence_score;
            
            if !profitable {
                debug!("   üö´ –ú–∞—Ä—à—Ä—É—Ç {} –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è –ø—Ä–∏–±—ã–ª—å {:.2}% < {:.2}%", 
                    route.id, route.profit_percentage * 100.0, self.min_profit_threshold * 100.0);
            }
            if !risk_acceptable {
                debug!("   üö´ –ú–∞—Ä—à—Ä—É—Ç {} –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω: –≤—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫ {:.2} > {:.2}", 
                    route.id, route.risk_score, self.risk_tolerance);
            }
            if !confident {
                debug!("   üö´ –ú–∞—Ä—à—Ä—É—Ç {} –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω: –Ω–∏–∑–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å {:.2} < {:.2}", 
                    route.id, route.confidence_score, self.min_confidence_score);
            }
            
            profitable && risk_acceptable && confident
        });
        
        info!("   –ú–∞—Ä—à—Ä—É—Ç–æ–≤ –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: {} (–±—ã–ª–æ: {})", routes.len(), initial_count);
        info!("   –§–∏–ª—å—Ç—Ä—ã: –ø—Ä–∏–±—ã–ª—å ‚â•{:.2}%, —Ä–∏—Å–∫ ‚â§{:.2}, —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å ‚â•{:.2}", 
            self.min_profit_threshold * 100.0, self.risk_tolerance, self.min_confidence_score);
        info!("‚úÖ –ù–∞–π–¥–µ–Ω–æ {} –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤", routes.len());
        
        routes
    }
    
    /// Brute force –ø–æ–∏—Å–∫ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞ (–ø–æ –ø—Ä–∏–º–µ—Ä—É —Ä–∞–±–æ—á–µ–≥–æ –∫–æ–¥–∞)
    fn brute_force_search(
        &self,
        start_mint_idx: usize,
        init_balance: u64,
        curr_balance: u64,
        path: Vec<usize>,
        pool_path: Vec<PoolQuote>,
        sent_arbs: &mut HashSet<String>,
        routes: &mut Vec<ArbitrageRoute>,
    ) {
        let src_curr = path[path.len() - 1]; // –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ç–æ–∫–µ–Ω –≤ –ø—É—Ç–∏
        let src_mint = &self.token_mints[src_curr];
        
        // –ú–∞–∫—Å–∏–º—É–º 3 —à–∞–≥–∞ –¥–ª—è 2 DEX
        if path.len() >= 4 {
            return;
        }
        
        // –ò—â–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø–µ—Ä–µ—Ö–æ–¥—ã –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Ç–æ–∫–µ–Ω–∞
        if let Some(edges) = self.pool_graph.0.get(&TokenIndex(src_curr)) {
            for (dst_mint_idx, pools) in edges {
                let dst_mint_idx = dst_mint_idx.0;
                let dst_mint = &self.token_mints[dst_mint_idx];
                
                // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω —É–∂–µ –≤ –ø—É—Ç–∏ (–∫—Ä–æ–º–µ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –Ω–∞—á–∞–ª—É)
                if path.contains(&dst_mint_idx) && dst_mint_idx != start_mint_idx {
                    continue;
                }
                
                // –í—ã–±–∏—Ä–∞–µ–º –ª—É—á—à–∏–π –ø—É–ª –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞
                if let Some(best_pool) = pools.iter().min_by(|a, b| {
                    a.price_a_to_b.partial_cmp(&b.price_a_to_b).unwrap_or(std::cmp::Ordering::Equal)
                }) {
                    let new_balance = best_pool.get_quote_with_amounts_scaled(
                        curr_balance,
                        src_mint,
                        dst_mint,
                    );
                    
                    let mut new_path = path.clone();
                    new_path.push(dst_mint_idx);
                    
                    let mut new_pool_path = pool_path.clone();
                    new_pool_path.push(best_pool.clone());
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–µ—Ä–Ω—É–ª–∏—Å—å –ª–∏ –∫ –Ω–∞—á–∞–ª—å–Ω–æ–º—É —Ç–æ–∫–µ–Ω—É (–∞—Ä–±–∏—Ç—Ä–∞–∂!)
                    if dst_mint_idx == start_mint_idx && new_path.len() >= 3 {
                        if new_balance > init_balance {
                            // –ù–∞—à–ª–∏ –ø—Ä–∏–±—ã–ª—å–Ω—ã–π –∞—Ä–±–∏—Ç—Ä–∞–∂!
                            let profit = new_balance - init_balance;
                            let profit_percentage = profit as f64 / init_balance as f64;
                            
                            // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è –∞—Ä–±–∏—Ç—Ä–∞–∂–∞
                            let mint_keys: Vec<String> = new_path.iter().map(|i| i.to_string()).collect();
                            let pool_keys: Vec<String> = new_pool_path.iter().map(|p| p.get_name()).collect();
                            let arb_key = format!("{}_{}", mint_keys.join("->"), pool_keys.join("->"));
                            
                            if !sent_arbs.contains(&arb_key) {
                                sent_arbs.insert(arb_key);
                                
                                info!("üéØ –ù–∞–π–¥–µ–Ω –∞—Ä–±–∏—Ç—Ä–∞–∂: {} -> {} (–ø—Ä–∏–±—ã–ª—å: {:.2}%)", 
                                    init_balance, new_balance, profit_percentage * 100.0);
                                
                                // –°–æ–∑–¥–∞–µ–º –º–∞—Ä—à—Ä—É—Ç –∞—Ä–±–∏—Ç—Ä–∞–∂–∞
                                if let Some(route) = self.create_arbitrage_route(
                                    &new_path,
                                    &new_pool_path,
                                    profit_percentage,
                                    init_balance,
                                    new_balance,
                                ) {
                                    routes.push(route);
                                }
                            }
                        }
                    } else {
                        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–∏—Å–∫
                        self.brute_force_search(
                            start_mint_idx,
                            init_balance,
                            new_balance,
                            new_path,
                            new_pool_path,
                            sent_arbs,
                            routes,
                        );
                    }
                }
            }
        }
    }
    
    /// –°–æ–∑–¥–∞—Ç—å –º–∞—Ä—à—Ä—É—Ç –∞—Ä–±–∏—Ç—Ä–∞–∂–∞ –∏–∑ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –ø—É—Ç–∏
    fn create_arbitrage_route(
        &self,
        path: &[usize],
        pool_path: &[PoolQuote],
        profit_percentage: f64,
        init_balance: u64,
        final_balance: u64,
    ) -> Option<ArbitrageRoute> {
        if path.len() < 3 || pool_path.len() < 2 {
            return None;
        }
        
        let mut steps = Vec::new();
        let mut current_balance = init_balance;
        
        // –°–æ–∑–¥–∞–µ–º —à–∞–≥–∏ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞
        for i in 0..pool_path.len() {
            let pool = &pool_path[i];
            let token_in_idx = path[i];
            let token_out_idx = path[i + 1];
            
            let token_in_mint = &self.token_mints[token_in_idx];
            let token_out_mint = &self.token_mints[token_out_idx];
            
            let amount_out = pool.get_quote_with_amounts_scaled(
                current_balance,
                token_in_mint,
                token_out_mint,
            );
            
            let step = ArbitrageStep {
                dex_type: pool.dex_type.clone(),
                pool_id: pool.pool_id.clone(),
                token_in: Token {
                    mint: solana_sdk::pubkey::Pubkey::try_from(token_in_mint.as_bytes()).unwrap_or_default(),
                    symbol: token_in_mint.clone(), // –í—Ä–µ–º–µ–Ω–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º mint –∫–∞–∫ symbol
                    decimals: 9,
                    name: Some(token_in_mint.clone()),
                },
                token_out: Token {
                    mint: solana_sdk::pubkey::Pubkey::try_from(token_out_mint.as_bytes()).unwrap_or_default(),
                    symbol: token_out_mint.clone(),
                    decimals: 9,
                    name: Some(token_out_mint.clone()),
                },
                amount_in: Amount::new(current_balance, 9),
                expected_amount_out: Amount::new(amount_out, 9),
                price_impact: 0.001,
                fee: pool.fee.clone(),
                slippage_estimate: 0.001,
                gas_estimate: Amount::new(5000000, 9),
            };
            
            steps.push(step);
            current_balance = amount_out;
        }
        
        // –°–æ–∑–¥–∞–µ–º –º–∞—Ä—à—Ä—É—Ç
        let route = ArbitrageRoute {
            id: format!("arb_{}_{}_{}", 
                self.token_mints[path[0]], 
                self.token_mints[path[1]], 
                self.token_mints[path[0]]),
            steps,
            expected_profit: (final_balance - init_balance) as f64 / 1_000_000_000.0,
            total_cost: Amount::new(10000000, 9), // –ü—Ä–∏–º–µ—Ä–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å
            profit_percentage,
            risk_score: self.calculate_risk_score(profit_percentage, 0.001),
            confidence_score: self.calculate_confidence_score(profit_percentage, 0.001),
            execution_time_estimate: std::time::Duration::from_millis(500),
            timestamp: std::time::Instant::now(),
        };
        
        Some(route)
    }

    /// –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä—ã –¥–ª—è —Ç–æ–∫–µ–Ω–∞
    async fn get_available_trading_pairs(&self, base_token: &str) -> HashMap<String, Vec<PriceData>> {
        // –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –∑–¥–µ—Å—å –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞—Ä—ã
        // –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ –¥–ª—è SOL/USDC
        let mut pairs = HashMap::new();
        
        if base_token == "111111111111111111111111111111111111111111111111111111111111111111" {
            // SOL -> USDC
            let usdc_mint = "EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v"; // USDC mint
            let demo_prices = vec![
                PriceData {
                    token_mint: usdc_mint.to_string(),
                    dex_type: DexType::OrcaWhirlpool,
                    pool_id: "orca_sol_usdc_pool".to_string(),
                    price: 0.00098, // 1 SOL = 0.00098 USDC (–ø—Ä–∏–º–µ—Ä–Ω–æ 98 USDC –∑–∞ 1 SOL)
                    liquidity: Amount::new(1000000000000, 9), // 1000 SOL
                    volume_24h: Some(1000000.0),
                    price_change_24h: Some(0.01),
                    timestamp: std::time::Instant::now(),
                },
                PriceData {
                    token_mint: usdc_mint.to_string(),
                    dex_type: DexType::RaydiumAMM,
                    pool_id: "raydium_sol_usdc_pool".to_string(),
                    price: 0.00100, // 1 SOL = 0.00100 USDC (100 USDC –∑–∞ 1 SOL)
                    liquidity: Amount::new(800000000000, 9), // 800 SOL
                    volume_24h: Some(800000.0),
                    price_change_24h: Some(0.02),
                    timestamp: std::time::Instant::now(),
                },
            ];
            pairs.insert(usdc_mint.to_string(), demo_prices);
        }
        
        pairs
    }

    /// –ü–æ–∏—Å–∫ Triangle –∞—Ä–±–∏—Ç—Ä–∞–∂–∞ (A -> B -> C -> A)
    async fn find_triangle_arbitrage(
        &self,
        token_mint: &str,
        prices: &[&PriceData],
        all_token_prices: &HashMap<String, Vec<&PriceData>>,
    ) -> Option<ArbitrageRoute> {
        // –ò—â–µ–º —Ç–æ–∫–µ–Ω—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ç–æ—Ä–≥—É—é—Ç—Å—è —Å –±–∞–∑–æ–≤—ã–º —Ç–æ–∫–µ–Ω–æ–º
        let mut triangle_routes = Vec::new();
        
        for (other_token, other_prices) in all_token_prices {
            if other_token == token_mint {
                continue;
            }

            // –ò—â–µ–º –º–∞—Ä—à—Ä—É—Ç: A -> B -> C -> A
            if let Some(route) = self.find_triangle_route(token_mint, other_token, prices, other_prices).await {
                triangle_routes.push(route);
            }
        }

        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–∞–º—ã–π –ø—Ä–∏–±—ã–ª—å–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç
        triangle_routes.into_iter()
            .max_by(|a, b| a.profit_percentage.partial_cmp(&b.profit_percentage).unwrap_or(std::cmp::Ordering::Equal))
    }

    /// –ü–æ–∏—Å–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞
    async fn find_triangle_route(
        &self,
        token_a: &str,
        token_b: &str,
        prices_a: &[&PriceData],
        prices_b: &[&PriceData],
    ) -> Option<ArbitrageRoute> {
        if prices_a.len() < 2 || prices_b.len() < 2 {
            return None;
        }

        // –ù–∞—Ö–æ–¥–∏–º –ª—É—á—à–∏–µ —Ü–µ–Ω—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        let best_buy_a = prices_a.iter().min_by(|a, b| a.price.partial_cmp(&b.price).unwrap_or(std::cmp::Ordering::Equal))?;
        let best_sell_a = prices_a.iter().max_by(|a, b| a.price.partial_cmp(&b.price).unwrap_or(std::cmp::Ordering::Equal))?;
        let best_buy_b = prices_b.iter().min_by(|a, b| a.price.partial_cmp(&b.price).unwrap_or(std::cmp::Ordering::Equal))?;
        let best_sell_b = prices_b.iter().max_by(|a, b| a.price.partial_cmp(&b.price).unwrap_or(std::cmp::Ordering::Equal))?;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Ä–∞–∑–Ω—ã–µ DEX
        if best_buy_a.dex_type == best_sell_a.dex_type || 
           best_buy_b.dex_type == best_sell_b.dex_type {
            return None;
        }

        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç—å —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞
        let base_amount = 1000000000u64; // 1 SOL
        
        // A -> B (–ø–æ–∫—É–ø–∞–µ–º B –∑–∞ A)
        let amount_b = (base_amount as f64 / best_buy_b.price) as u64;
        
        // B -> A (–ø—Ä–æ–¥–∞–µ–º B –∑–∞ A)
        let amount_a_final = (amount_b as f64 * best_sell_b.price) as u64;
        
        let profit = if amount_a_final > base_amount {
            amount_a_final - base_amount
        } else {
            return None; // –£–±—ã—Ç–æ—á–Ω–æ
        };

        let profit_percentage = profit as f64 / base_amount as f64;
        
        if profit_percentage < self.min_profit_threshold {
            return None;
        }

        // –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω–æ–≤
        let metadata_a = match self.token_metadata.get_token_metadata(token_a).await {
            Ok(m) => m,
            Err(_) => return None,
        };
        
        let metadata_b = match self.token_metadata.get_token_metadata(token_b).await {
            Ok(m) => m,
            Err(_) => return None,
        };

        // –°–æ–∑–¥–∞–µ–º —Ç—Ä–µ—É–≥–æ–ª—å–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç
        let route = ArbitrageRoute {
            id: format!("triangle_{}_{}_{}", metadata_a.symbol, metadata_b.symbol, metadata_a.symbol),
            steps: vec![
                // A -> B
                ArbitrageStep {
                    dex_type: best_buy_b.dex_type.clone(),
                    pool_id: best_buy_b.pool_id.clone(),
                    token_in: Token {
                        mint: solana_sdk::pubkey::Pubkey::try_from(token_a.as_bytes()).unwrap_or_default(),
                        symbol: metadata_a.symbol.clone(),
                        decimals: metadata_a.decimals,
                        name: Some(metadata_a.name.clone()),
                    },
                    token_out: Token {
                        mint: solana_sdk::pubkey::Pubkey::try_from(token_b.as_bytes()).unwrap_or_default(),
                        symbol: metadata_b.symbol.clone(),
                        decimals: metadata_b.decimals,
                        name: Some(metadata_b.name.clone()),
                    },
                    amount_in: Amount::new(base_amount, 9),
                    expected_amount_out: Amount::new(amount_b, 9),
                    price_impact: 0.001,
                    fee: Amount::new(5000000, 9),
                    slippage_estimate: 0.001,
                    gas_estimate: Amount::new(5000000, 9),
                },
                // B -> A
                ArbitrageStep {
                    dex_type: best_sell_b.dex_type.clone(),
                    pool_id: best_sell_b.pool_id.clone(),
                    token_in: Token {
                        mint: solana_sdk::pubkey::Pubkey::try_from(token_b.as_bytes()).unwrap_or_default(),
                        symbol: metadata_b.symbol.clone(),
                        decimals: metadata_b.decimals,
                        name: Some(metadata_b.name.clone()),
                    },
                    token_out: Token {
                        mint: solana_sdk::pubkey::Pubkey::try_from(token_a.as_bytes()).unwrap_or_default(),
                        symbol: metadata_a.symbol.clone(),
                        decimals: metadata_a.decimals,
                        name: Some(metadata_a.name.clone()),
                    },
                    amount_in: Amount::new(amount_b, 9),
                    expected_amount_out: Amount::new(amount_a_final, 9),
                    price_impact: 0.001,
                    fee: Amount::new(5000000, 9),
                    slippage_estimate: 0.001,
                    gas_estimate: Amount::new(5000000, 9),
                },
            ],
            expected_profit: profit as f64,
            profit_percentage,
            total_cost: Amount::new(20000000, 9), // 0.02 SOL
            risk_score: 0.4, // –°—Ä–µ–¥–Ω–∏–π —Ä–∏—Å–∫ –¥–ª—è —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞
            timestamp: Instant::now(),
            confidence_score: 0.8,
            execution_time_estimate: Duration::from_millis(800),
        };

        info!("üéØ Triangle –∞—Ä–±–∏—Ç—Ä–∞–∂: {} -> {} -> {} (–ø—Ä–∏–±—ã–ª—å: {:.2}%)", 
            metadata_a.symbol, metadata_b.symbol, metadata_a.symbol, profit_percentage * 100.0);

        Some(route)
    }

    /// –ü–æ–∏—Å–∫ Multi-Hop –∞—Ä–±–∏—Ç—Ä–∞–∂–∞ (A -> B -> C -> D -> A)
    async fn find_multi_hop_arbitrage(
        &self,
        token_mint: &str,
        prices: &[&PriceData],
        all_token_prices: &HashMap<String, Vec<&PriceData>>,
    ) -> Option<ArbitrageRoute> {
        // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–∏—Å–∫ –º–Ω–æ–≥–æ—à–∞–≥–æ–≤–æ–≥–æ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞
        // –≠—Ç–æ —Ç—Ä–µ–±—É–µ—Ç –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∞ —Ç–æ–∫–µ–Ω–æ–≤ –∏ –ø–æ–∏—Å–∫–∞ —Ü–∏–∫–ª–æ–≤
        None
    }

    /// –†–∞—Å—á–µ—Ç –æ—Ü–µ–Ω–∫–∏ –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏
    fn calculate_slippage_estimate(&self, amount_in: u64, pool_liquidity: u64) -> f64 {
        let liquidity_ratio = amount_in as f64 / pool_liquidity as f64;
        
        // –ü—Ä–æ—Å—Ç–∞—è –º–æ–¥–µ–ª—å –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏—è: –∫–≤–∞–¥—Ä–∞—Ç–∏—á–Ω–∞—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—Ç —Ä–∞–∑–º–µ—Ä–∞ —Å–¥–µ–ª–∫–∏
        let slippage = liquidity_ratio * liquidity_ratio * 0.1; // 10% –±–∞–∑–æ–≤—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç
        
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏–µ
        slippage.min(self.max_slippage)
    }

    /// –†–∞—Å—á–µ—Ç –∫–æ–º–∏—Å—Å–∏–π –¥–ª—è DEX
    fn calculate_fee_estimate(&self, dex_type: &DexType, amount: u64) -> Amount {
        let fee_rate = match dex_type {
            DexType::OrcaWhirlpool => 0.0003, // 0.03%
            DexType::RaydiumAMM => 0.0025,    // 0.25%
        };

        Amount::new((amount as f64 * fee_rate) as u64, 9)
    }

    /// –†–∞—Å—á–µ—Ç –≥–∞–∑–∞ –¥–ª—è DEX
    fn calculate_gas_estimate(&self, dex_type: &DexType) -> Amount {
        let gas_estimate = match dex_type {
            DexType::OrcaWhirlpool => 5000000,  // 0.005 SOL
            DexType::RaydiumAMM => 6000000,     // 0.006 SOL
        };

        Amount::new(gas_estimate, 9)
    }

    /// –†–∞—Å—á–µ—Ç –æ—Ü–µ–Ω–∫–∏ —Ä–∏—Å–∫–∞ –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–∞
    fn calculate_risk_score(&self, profit_percentage: f64, slippage_estimate: f64) -> f64 {
        let mut risk_score: f64 = 0.0;

        // –†–∏—Å–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–∏–±—ã–ª–∏
        if profit_percentage < 0.001 { // 0.1% –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å
            risk_score += 0.5; // –ù–∏–∑–∫–∞—è –ø—Ä–∏–±—ã–ª—å = –≤—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫
        } else if profit_percentage < 0.01 { // 1% –ø—Ä–∏–±—ã–ª—å
            risk_score += 0.3; // –°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å = —Å—Ä–µ–¥–Ω–∏–π —Ä–∏—Å–∫
        } else {
            risk_score += 0.1; // –í—ã—Å–æ–∫–∞—è –ø—Ä–∏–±—ã–ª—å = –Ω–∏–∑–∫–∏–π —Ä–∏—Å–∫
        }

        // –†–∏—Å–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏—è
        if slippage_estimate > 0.05 { // 5% –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏–µ
            risk_score += 0.4; // –í—ã—Å–æ–∫–æ–µ –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏–µ = –≤—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫
        } else if slippage_estimate > 0.01 { // 1% –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏–µ
            risk_score += 0.2; // –°—Ä–µ–¥–Ω–µ–µ –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏–µ = —Å—Ä–µ–¥–Ω–∏–π —Ä–∏—Å–∫
        } else {
            risk_score += 0.1; // –ù–∏–∑–∫–æ–µ –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏–µ = –Ω–∏–∑–∫–∏–π —Ä–∏—Å–∫
        }

        // –†–∏—Å–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ (—É–ø—Ä–æ—â–µ–Ω–Ω–æ)
        // –≠—Ç–æ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —Ç–µ–∫—É—â–µ–π –ª–æ–≥–∏–∫–µ Two-Hop, –Ω–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω
        // –µ—Å–ª–∏ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —à–∞–≥–∞
        risk_score.min(1.0) // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∏—Å–∫
    }

    /// –†–∞—Å—á–µ—Ç —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –≤ —Ä–∞—Å—á–µ—Ç–∞—Ö
    fn calculate_confidence_score(&self, profit_percentage: f64, slippage_estimate: f64) -> f64 {
        let mut confidence: f64 = 1.0;

        // –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–∏–±—ã–ª–∏
        if profit_percentage < 0.001 { // 0.1% –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å
            confidence *= 0.6; // –ù–∏–∑–∫–∞—è –ø—Ä–∏–±—ã–ª—å —Å–Ω–∏–∂–∞–µ—Ç —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
        } else if profit_percentage < 0.01 { // 1% –ø—Ä–∏–±—ã–ª—å
            confidence *= 0.8; // –°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å = —Å—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
        } else {
            confidence *= 0.9; // –í—ã—Å–æ–∫–∞—è –ø—Ä–∏–±—ã–ª—å = –≤—ã—Å–æ–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
        }

        // –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏—è
        if slippage_estimate > 0.05 { // 5% –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏–µ
            confidence *= 0.7; // –í—ã—Å–æ–∫–æ–µ –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏–µ —Å–Ω–∏–∂–∞–µ—Ç —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
        } else if slippage_estimate > 0.01 { // 1% –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏–µ
            confidence *= 0.9; // –°—Ä–µ–¥–Ω–µ–µ –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏–µ = —Å—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
        } else {
            confidence *= 1.0; // –ù–∏–∑–∫–æ–µ –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏–µ = –≤—ã—Å–æ–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
        }

        // –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ (—É–ø—Ä–æ—â–µ–Ω–Ω–æ)
        // –≠—Ç–æ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —Ç–µ–∫—É—â–µ–π –ª–æ–≥–∏–∫–µ Two-Hop, –Ω–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω
        confidence.max(0.1) // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å 10%
    }

    /// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç–∏ –º–∞—Ä—à—Ä—É—Ç–∞ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ —Ä–∞—Å—á–µ—Ç–∞–º–∏
    pub fn calculate_route_profit(&self, route: &ArbitrageRoute) -> ProfitCalculation {
        let gross_profit = route.expected_profit;
        
        // –°—É–º–º–∏—Ä—É–µ–º –≤—Å–µ –∫–æ–º–∏—Å—Å–∏–∏
        let total_fees: u64 = route.steps.iter().map(|step| step.fee.value).sum();
        let total_gas: u64 = route.steps.iter().map(|step| step.gas_estimate.value).sum();
        
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏–µ
        let total_slippage_cost = route.steps.iter()
            .map(|step| step.expected_amount_out.value as f64 * step.slippage_estimate)
            .sum::<f64>();

        let net_profit = gross_profit - total_fees as f64 - total_gas as f64 - total_slippage_cost;
        let profit_margin = if gross_profit > 0.0 { net_profit / gross_profit } else { 0.0 };
        let is_profitable = net_profit > 0.0 && profit_margin >= self.min_profit_threshold;
        
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º ROI
        let total_investment = route.steps[0].amount_in.value as f64;
        let roi_percentage = if total_investment > 0.0 { (net_profit / total_investment) * 100.0 } else { 0.0 };
        
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–æ—á–∫—É –±–µ–∑—É–±—ã—Ç–æ—á–Ω–æ—Å—Ç–∏
        let break_even_amount = if roi_percentage > 0.0 { 
            total_investment * (1.0 + (total_fees as f64 + total_gas as f64 + total_slippage_cost) / total_investment)
        } else { 
            0.0 
        };

        ProfitCalculation {
            gross_profit,
            net_profit,
            gas_cost: Amount::new(total_gas, 9),
            slippage_cost: total_slippage_cost,
            fee_cost: total_fees as f64,
            profit_margin,
            is_profitable,
            roi_percentage,
            break_even_amount,
        }
    }

    /// –í–∞–ª–∏–¥–∞—Ü–∏—è –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ –º–∞—Ä—à—Ä—É—Ç–∞ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
    pub fn validate_route_liquidity(&self, route: &ArbitrageRoute) -> bool {
        for step in &route.steps {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—É–º–º–∞ —Å–¥–µ–ª–∫–∏ –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å –ø—É–ª–∞
            if step.amount_in.value > step.expected_amount_out.value {
                // –ï—Å–ª–∏ –≤—Ö–æ–¥ –±–æ–ª—å—à–µ –≤—ã—Ö–æ–¥–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å –≤—Ö–æ–¥–∞
                if step.amount_in.value < self.min_liquidity.value {
                    return false;
                }
            } else {
                // –ï—Å–ª–∏ –≤—ã—Ö–æ–¥ –±–æ–ª—å—à–µ –≤—Ö–æ–¥–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å –≤—ã—Ö–æ–¥–∞
                if step.expected_amount_out.value < self.min_liquidity.value {
                    return false;
                }
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏–µ –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –¥–æ–ø—É—Å—Ç–∏–º–æ–µ
            if step.slippage_estimate > self.max_slippage {
                return false;
            }
        }
        true
    }

    /// –û–±–Ω–æ–≤–∏—Ç—å –∫—ç—à —Ü–µ–Ω —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    pub async fn update_price_cache(&self, price_data: PriceData) {
        let mut cache = self.price_cache.write().await;
        cache.entry(price_data.token_mint.clone()).or_insert_with(Vec::new).push(price_data);
    }

    /// –ü–æ–ª—É—á–∏—Ç—å –∫—ç—à —Ü–µ–Ω
    pub async fn get_price_cache(&self) -> HashMap<String, Vec<PriceData>> {
        self.price_cache.read().await.clone()
    }

    /// –û—á–∏—Å—Ç–∏—Ç—å —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ —Ü–µ–Ω—ã
    pub async fn cleanup_stale_prices(&self, max_age: Duration) {
        let mut cache = self.price_cache.write().await;
        let now = Instant::now();
        cache.retain(|_, prices| prices.iter().all(|p| now.duration_since(p.timestamp) <= max_age));
    }

    /// –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫—ç—à–∞ —Ü–µ–Ω
    pub async fn get_cache_stats(&self) -> (usize, Duration) {
        let cache = self.price_cache.read().await;
        let size = cache.len();
        let oldest_timestamp = cache.values()
            .flat_map(|prices| prices.iter())
            .map(|p| p.timestamp)
            .min()
            .unwrap_or(Instant::now());
        let age = Instant::now().duration_since(oldest_timestamp);
        (size, age)
    }

    /// –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ –ø—É–ª–æ–≤ –∏–∑ –∫—ç—à–∞ —Ü–µ–Ω
    pub async fn build_pool_graph(&mut self) {
        let cache = self.price_cache.read().await;
        let mut graph = PoolGraph::new();
        let mut token_mints = Vec::new();
        let mut token_to_index = HashMap::new();
        
        // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã
        for (token_mint, prices) in cache.iter() {
            if !token_to_index.contains_key(token_mint) {
                token_to_index.insert(token_mint.clone(), token_mints.len());
                token_mints.push(token_mint.clone());
            }
        }
        
        // –°—Ç—Ä–æ–∏–º –≥—Ä–∞—Ñ –ø—É–ª–æ–≤
        for (token_mint, prices) in cache.iter() {
            let token_a_idx = *token_to_index.get(token_mint).unwrap();
            
            // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ü–µ–Ω—ã –ø–æ DEX –¥–ª—è –ø–æ–∏—Å–∫–∞ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞
            let mut dex_prices: HashMap<DexType, Vec<&PriceData>> = HashMap::new();
            for price in prices {
                dex_prices.entry(price.dex_type.clone()).or_insert_with(Vec::new).push(price);
            }
            
            // –ò—â–µ–º –¥—Ä—É–≥–∏–µ —Ç–æ–∫–µ–Ω—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—É–ª–æ–≤
            for (other_mint, other_prices) in cache.iter() {
                if token_mint == other_mint {
                    continue; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–æ—Ç –∂–µ —Ç–æ–∫–µ–Ω
                }
                
                let token_b_idx = *token_to_index.get(other_mint).unwrap();
                
                // –°–æ–∑–¥–∞–µ–º –ø—É–ª –º–µ–∂–¥—É —Ç–æ–∫–µ–Ω–∞–º–∏
                for (dex_type, dex_price_list) in dex_prices.iter() {
                    if let Some(price_data) = dex_price_list.first() {
                        let pool_quote = PoolQuote {
                            pool_id: price_data.pool_id.clone(),
                            dex_type: dex_type.clone(),
                            token_a: token_mint.clone(),
                            token_b: other_mint.clone(),
                            price_a_to_b: price_data.price,
                            price_b_to_a: 1.0 / price_data.price, // –û–±—Ä–∞—Ç–Ω–∞—è —Ü–µ–Ω–∞
                            liquidity: price_data.liquidity.clone(),
                            fee: Amount::new(5000000, 9), // –ü—Ä–∏–º–µ—Ä–Ω–∞—è –∫–æ–º–∏—Å—Å–∏—è
                        };
                        
                        graph.add_pool(token_a_idx, token_b_idx, pool_quote);
                    }
                }
            }
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—è
        self.pool_graph = graph;
        self.token_mints = token_mints;
        self.token_to_index = token_to_index;
        
        info!("üèóÔ∏è –ü–æ—Å—Ç—Ä–æ–µ–Ω –≥—Ä–∞—Ñ –ø—É–ª–æ–≤: {} —Ç–æ–∫–µ–Ω–æ–≤, {} –ø—É–ª–æ–≤", 
            self.token_mints.len(), 
            self.count_total_pools());
    }
    
    /// –ü–æ–¥—Å—á–∏—Ç–∞—Ç—å –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—É–ª–æ–≤ –≤ –≥—Ä–∞—Ñ–µ
    fn count_total_pools(&self) -> usize {
        let mut total = 0;
        for edges in self.pool_graph.0.values() {
            for pools in edges.values() {
                total += pools.len();
            }
        }
        total
    }
}

#[cfg(test)]
mod tests {
    use super::*;
    use crate::domain::dex::DexType;

    #[tokio::test]
    async fn test_find_two_hop_arbitrage() {
        let rpc_client = Arc::new(solana_client::rpc_client::RpcClient::new("".to_string()));
        let token_metadata = Arc::new(TokenMetadataService::new(rpc_client));
        let mut detector = ArbitrageOpportunityDetector::new_default(token_metadata);
        
        let price_data = vec![
            PriceData {
                token_mint: "SOL".to_string(),
                price: 100.0,
                dex_type: DexType::OrcaWhirlpool,
                pool_id: "pool1".to_string(),
                timestamp: Instant::now(),
                liquidity: Amount::new(1000000000, 9),
                volume_24h: Some(1000000000.0),
                price_change_24h: Some(0.01),
            },
            PriceData {
                token_mint: "SOL".to_string(),
                price: 98.0,
                dex_type: DexType::RaydiumAMM,
                pool_id: "pool2".to_string(),
                timestamp: Instant::now(),
                liquidity: Amount::new(1000000000, 9),
                volume_24h: Some(1000000000.0),
                price_change_24h: Some(0.01),
            },
        ];

        detector.update_price_cache(price_data[0].clone()).await;
        detector.update_price_cache(price_data[1].clone()).await;
        detector.build_pool_graph().await;

        let routes = detector.find_arbitrage_routes(&price_data).await;
        assert!(!routes.is_empty());
        
        let route = &routes[0];
        assert_eq!(route.steps.len(), 2);
        assert!(route.profit_percentage > 0.0);
    }
}
