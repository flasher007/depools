use crate::shared::errors::AppError;
use crate::shared::types::{Amount, Token};
use crate::domain::dex::{DexType, PoolInfo};
use crate::infrastructure::blockchain::TokenMetadataService;
use std::collections::{HashMap, HashSet};
use std::sync::Arc;
use std::time::{Duration, Instant};
use tokio::sync::RwLock;
use tracing::{info, warn, debug, error};

/// –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ü–µ–Ω–µ —Ç–æ–∫–µ–Ω–∞
#[derive(Debug, Clone)]
pub struct PriceData {
    pub token_mint: String,
    pub price: f64,
    pub dex_type: DexType,
    pub pool_id: String,
    pub timestamp: Instant,
    pub liquidity: Amount,
    pub volume_24h: Option<f64>, // 24-—á–∞—Å–æ–≤–æ–π –æ–±—ä–µ–º —Ç–æ—Ä–≥–æ–≤
    pub price_change_24h: Option<f64>, // –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –∑–∞ 24 —á–∞—Å–∞
}

/// –ê—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç
#[derive(Debug, Clone)]
pub struct ArbitrageRoute {
    pub id: String,
    pub steps: Vec<ArbitrageStep>,
    pub expected_profit: f64,
    pub profit_percentage: f64,
    pub total_cost: Amount,
    pub risk_score: f64,
    pub timestamp: Instant,
    pub confidence_score: f64, // –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ —Ä–∞—Å—á–µ—Ç–∞—Ö (0.0 - 1.0)
    pub execution_time_estimate: Duration, // –û—Ü–µ–Ω–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
}

/// –®–∞–≥ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞
#[derive(Debug, Clone)]
pub struct ArbitrageStep {
    pub dex_type: DexType,
    pub pool_id: String,
    pub token_in: Token,
    pub token_out: Token,
    pub amount_in: Amount,
    pub expected_amount_out: Amount,
    pub price_impact: f64,
    pub fee: Amount,
    pub slippage_estimate: f64, // –û—Ü–µ–Ω–∫–∞ –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏—è
    pub gas_estimate: Amount, // –û—Ü–µ–Ω–∫–∞ –≥–∞–∑–∞ –¥–ª—è —ç—Ç–æ–≥–æ —à–∞–≥–∞
}

/// –†–∞—Å—á–µ—Ç –ø—Ä–∏–±—ã–ª–∏
#[derive(Debug, Clone)]
pub struct ProfitCalculation {
    pub gross_profit: f64,
    pub net_profit: f64,
    pub gas_cost: Amount,
    pub slippage_cost: f64,
    pub fee_cost: f64,
    pub profit_margin: f64,
    pub is_profitable: bool,
    pub roi_percentage: f64, // ROI –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
    pub break_even_amount: f64, // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –±–µ–∑—É–±—ã—Ç–æ—á–Ω–æ—Å—Ç–∏
}

/// –î–µ—Ç–µ–∫—Ç–æ—Ä –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
pub struct ArbitrageOpportunityDetector {
    min_profit_threshold: f64,
    min_liquidity: Amount,
    price_cache: Arc<RwLock<HashMap<String, PriceData>>>,
    max_route_length: usize,
    risk_tolerance: f64,
    token_metadata: Arc<TokenMetadataService>,
    max_slippage: f64, // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –¥–æ–ø—É—Å—Ç–∏–º–æ–µ –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏–µ
    min_confidence_score: f64, // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ —Ä–∞—Å—á–µ—Ç–∞—Ö
}

impl ArbitrageOpportunityDetector {
    /// –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –¥–µ—Ç–µ–∫—Ç–æ—Ä
    pub fn new(
        min_profit_threshold: f64,
        min_liquidity: Amount,
        max_route_length: usize,
        risk_tolerance: f64,
        token_metadata: Arc<TokenMetadataService>,
    ) -> Self {
        Self {
            min_profit_threshold,
            min_liquidity,
            price_cache: Arc::new(RwLock::new(HashMap::new())),
            max_route_length,
            risk_tolerance,
            token_metadata,
            max_slippage: 0.10, // 10% –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏–µ (–±—ã–ª–æ 5%)
            min_confidence_score: 0.4, // 40% –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å (–±—ã–ª–æ 70%)
        }
    }

    /// –°–æ–∑–¥–∞—Ç—å —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    pub fn new_default(token_metadata: Arc<TokenMetadataService>) -> Self {
        Self::new(
            0.001, // 0.1% –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å (–±—ã–ª–æ 0.5%)
            Amount::new(1000000000, 9), // 1 SOL –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å
            4, // –ú–∞–∫—Å–∏–º—É–º 4 —à–∞–≥–∞ –≤ –º–∞—Ä—à—Ä—É—Ç–µ
            0.5, // –í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫ (–±—ã–ª–æ 0.3)
            token_metadata,
        )
    }

    /// –ü–æ–∏—Å–∫ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –∞–ª–≥–æ—Ä–∏—Ç–º–∞–º–∏
    pub async fn find_arbitrage_routes(&self, price_data: &[PriceData]) -> Vec<ArbitrageRoute> {
        info!("üîç –ü–æ–∏—Å–∫ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤...");
        
        let mut routes = Vec::new();
        let mut processed_pairs: HashSet<String> = HashSet::new();

        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ü–µ–Ω—ã –ø–æ —Ç–æ–∫–µ–Ω–∞–º
        let mut token_prices: HashMap<String, Vec<&PriceData>> = HashMap::new();
        for price in price_data {
            token_prices.entry(price.token_mint.clone()).or_insert_with(Vec::new).push(price);
        }

        info!("üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º {} —Ç–æ–∫–µ–Ω–æ–≤ —Å —Ü–µ–Ω–∞–º–∏", token_prices.len());

        // –ò—â–µ–º –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
        let mut total_pairs_checked = 0;
        let mut profitable_pairs_found = 0;
        
        for (token_mint, prices) in &token_prices {
            if prices.len() < 2 {
                debug!("‚è≠Ô∏è  –¢–æ–∫–µ–Ω {}: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ DEX ({}), –ø—Ä–æ–ø—É—Å–∫–∞–µ–º", token_mint, prices.len());
                continue; // –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 DEX –¥–ª—è –∞—Ä–±–∏—Ç—Ä–∞–∂–∞
            }

            info!("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω {}: {} DEX –Ω–∞–π–¥–µ–Ω–æ", token_mint, prices.len());
            
            // –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ü–µ–Ω—ã –ø–æ —É–±—ã–≤–∞–Ω–∏—é
            let mut sorted_prices: Vec<_> = prices.iter().collect();
            sorted_prices.sort_by(|a, b| b.price.partial_cmp(&a.price).unwrap_or(std::cmp::Ordering::Equal));

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω
            let highest_price = sorted_prices[0];
            let lowest_price = sorted_prices[sorted_prices.len() - 1];
            let price_spread = ((highest_price.price - lowest_price.price) / lowest_price.price) * 100.0;
            
            info!("   üí∞ –î–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω: {:.6} - {:.6} (—Å–ø—Ä–µ–¥: {:.2}%)", 
                lowest_price.price, highest_price.price, price_spread);

            // –ò—â–µ–º Two-Hop –∞—Ä–±–∏—Ç—Ä–∞–∂ (A -> B -> A)
            if let Some(route) = self.find_two_hop_arbitrage(token_mint, &sorted_prices.iter().map(|&&p| p).collect::<Vec<_>>()).await {
                routes.push(route);
                profitable_pairs_found += 1;
                info!("   ‚úÖ Two-Hop –∞—Ä–±–∏—Ç—Ä–∞–∂ –Ω–∞–π–¥–µ–Ω!");
            } else {
                debug!("   ‚ùå Two-Hop –∞—Ä–±–∏—Ç—Ä–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω");
            }

            // –ò—â–µ–º Triangle –∞—Ä–±–∏—Ç—Ä–∞–∂ (A -> B -> C -> A)
            if let Some(route) = self.find_triangle_arbitrage(token_mint, &sorted_prices.iter().map(|&&p| p).collect::<Vec<_>>(), &token_prices).await {
                routes.push(route);
                profitable_pairs_found += 1;
                info!("   ‚úÖ Triangle –∞—Ä–±–∏—Ç—Ä–∞–∂ –Ω–∞–π–¥–µ–Ω!");
            } else {
                debug!("   ‚ùå Triangle –∞—Ä–±–∏—Ç—Ä–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω");
            }

            // –ò—â–µ–º Multi-Hop –∞—Ä–±–∏—Ç—Ä–∞–∂ (A -> B -> C -> D -> A)
            if let Some(route) = self.find_multi_hop_arbitrage(token_mint, &sorted_prices.iter().map(|&&p| p).collect::<Vec<_>>(), &token_prices).await {
                routes.push(route);
                profitable_pairs_found += 1;
                info!("   ‚úÖ Multi-Hop –∞—Ä–±–∏—Ç—Ä–∞–∂ –Ω–∞–π–¥–µ–Ω!");
            } else {
                debug!("   ‚ùå Multi-Hop –∞—Ä–±–∏—Ç—Ä–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω");
            }

            total_pairs_checked += 1;
        }

        // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç–∏, —Ä–∏—Å–∫—É –∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
        let initial_count = routes.len();
        routes.retain(|route| {
            let profitable = route.profit_percentage >= self.min_profit_threshold;
            let risk_acceptable = route.risk_score <= self.risk_tolerance;
            let confident = route.confidence_score >= self.min_confidence_score;
            
            if !profitable {
                debug!("   üö´ –ú–∞—Ä—à—Ä—É—Ç {} –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è –ø—Ä–∏–±—ã–ª—å {:.2}% < {:.2}%", 
                    route.id, route.profit_percentage * 100.0, self.min_profit_threshold * 100.0);
            }
            if !risk_acceptable {
                debug!("   üö´ –ú–∞—Ä—à—Ä—É—Ç {} –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω: –≤—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫ {:.2} > {:.2}", 
                    route.id, route.risk_score, self.risk_tolerance);
            }
            if !confident {
                debug!("   üö´ –ú–∞—Ä—à—Ä—É—Ç {} –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω: –Ω–∏–∑–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å {:.2} < {:.2}", 
                    route.id, route.confidence_score, self.min_confidence_score);
            }
            
            profitable && risk_acceptable && confident
        });

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∞—Ç–∫—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —á—Ç–æ –ø–æ–∫–∞–∑–∞—Ç—å
        if total_pairs_checked > 0 {
            if profitable_pairs_found > 0 {
                info!("üìä –ù–∞–π–¥–µ–Ω–æ {} –ø—Ä–∏–±—ã–ª—å–Ω—ã—Ö –ø–∞—Ä –∏–∑ {} –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤", profitable_pairs_found, total_pairs_checked);
            } else {
                info!("üìä –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ {} —Ç–æ–∫–µ–Ω–æ–≤, –ø—Ä–∏–±—ã–ª—å–Ω—ã—Ö –ø–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", total_pairs_checked);
            }
        }

        info!("‚úÖ –ù–∞–π–¥–µ–Ω–æ {} –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤", routes.len());
        routes
    }

    /// –ü–æ–∏—Å–∫ Two-Hop –∞—Ä–±–∏—Ç—Ä–∞–∂–∞ (A -> B -> A) —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ —Ä–∞—Å—á–µ—Ç–∞–º–∏
    async fn find_two_hop_arbitrage(
        &self,
        token_mint: &str,
        prices: &[&PriceData],
    ) -> Option<ArbitrageRoute> {
        if prices.len() < 2 {
            return None;
        }

        // –ò—â–µ–º –∞—Ä–±–∏—Ç—Ä–∞–∂ –º–µ–∂–¥—É —Ä–∞–∑–Ω—ã–º–∏ —Ç–æ–∫–µ–Ω–∞–º–∏, –∞ –Ω–µ –≤–Ω—É—Ç—Ä–∏ –æ–¥–Ω–æ–≥–æ
        // –ù–∞–ø—Ä–∏–º–µ—Ä: SOL -> USDC -> SOL —á–µ—Ä–µ–∑ —Ä–∞–∑–Ω—ã–µ DEX
        
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã –¥–ª—è –∞—Ä–±–∏—Ç—Ä–∞–∂–∞
        let available_tokens = self.get_available_trading_pairs(token_mint).await;
        
        for (other_token, other_prices) in available_tokens {
            if other_prices.len() < 2 {
                continue;
            }
            
            // –ò—â–µ–º –ª—É—á—à–∏–µ —Ü–µ–Ω—ã –¥–ª—è –æ–±–º–µ–Ω–∞ token_mint <-> other_token
            let best_buy_other = other_prices.iter()
                .min_by(|a, b| a.price.partial_cmp(&b.price).unwrap_or(std::cmp::Ordering::Equal))?;
            let best_sell_other = other_prices.iter()
                .max_by(|a, b| a.price.partial_cmp(&b.price).unwrap_or(std::cmp::Ordering::Equal))?;
                
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Ä–∞–∑–Ω—ã–µ DEX
            if best_buy_other.dex_type == best_sell_other.dex_type {
                continue;
            }
            
            // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç—å –∞—Ä–±–∏—Ç—Ä–∞–∂–∞
            let base_amount = 1000000000u64; // 1 SOL –≤ lamports
            
            // SOL -> USDC (–ø–æ–∫—É–ø–∞–µ–º USDC –∑–∞ SOL)
            let usdc_amount = (base_amount as f64 / best_buy_other.price) as u64;
            
            // USDC -> SOL (–ø—Ä–æ–¥–∞–µ–º USDC –∑–∞ SOL)
            let sol_final = (usdc_amount as f64 * best_sell_other.price) as u64;
            
            let profit = if sol_final > base_amount {
                sol_final - base_amount
            } else {
                continue; // –£–±—ã—Ç–æ—á–Ω–æ
            };
            
            let profit_percentage = profit as f64 / base_amount as f64;
            
            if profit_percentage < self.min_profit_threshold {
                continue;
            }
            
            // –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω–æ–≤
            let sol_metadata = match self.token_metadata.get_token_metadata(token_mint).await {
                Ok(m) => m,
                Err(_) => continue,
            };
            
            let usdc_metadata = match self.token_metadata.get_token_metadata(&other_token).await {
                Ok(m) => m,
                Err(_) => continue,
            };
            
            // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ —Å—É–º–º—ã —Å —É—á–µ—Ç–æ–º –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏—è
            let amount_in = Amount::new(base_amount, 9);
            let slippage_estimate = self.calculate_slippage_estimate(amount_in.value, best_buy_other.liquidity.value);
            let effective_price = best_buy_other.price * (1.0 - slippage_estimate);
            let expected_amount_out = Amount::new((base_amount as f64 * effective_price) as u64, 9);
            
            // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–º–∏—Å—Å–∏–∏
            let fee_estimate = self.calculate_fee_estimate(&best_buy_other.dex_type, amount_in.value);
            let gas_estimate = self.calculate_gas_estimate(&best_buy_other.dex_type);
            
            // –°–æ–∑–¥–∞–µ–º –º–∞—Ä—à—Ä—É—Ç
            let route = ArbitrageRoute {
                id: format!("two_hop_{}_{}_{}_{}", 
                    sol_metadata.symbol, 
                    usdc_metadata.symbol,
                    best_buy_other.dex_type.as_str(), 
                    best_sell_other.dex_type.as_str()),
                steps: vec![
                    ArbitrageStep {
                        dex_type: best_buy_other.dex_type.clone(),
                        pool_id: best_buy_other.pool_id.clone(),
                        token_in: Token {
                            mint: solana_sdk::pubkey::Pubkey::try_from(token_mint.as_bytes()).unwrap_or_default(),
                            symbol: sol_metadata.symbol.clone(),
                            decimals: sol_metadata.decimals,
                            name: Some(sol_metadata.name.clone()),
                        },
                        token_out: Token {
                            mint: solana_sdk::pubkey::Pubkey::try_from(other_token.as_bytes()).unwrap_or_default(),
                            symbol: usdc_metadata.symbol.clone(),
                            decimals: usdc_metadata.decimals,
                            name: Some(usdc_metadata.name.clone()),
                        },
                        amount_in: amount_in.clone(),
                        expected_amount_out: expected_amount_out.clone(),
                        price_impact: slippage_estimate,
                        fee: fee_estimate.clone(),
                        slippage_estimate,
                        gas_estimate: gas_estimate.clone(),
                    },
                    ArbitrageStep {
                        dex_type: best_sell_other.dex_type.clone(),
                        pool_id: best_sell_other.pool_id.clone(),
                        token_in: Token {
                            mint: solana_sdk::pubkey::Pubkey::try_from(other_token.as_bytes()).unwrap_or_default(),
                            symbol: usdc_metadata.symbol.clone(),
                            decimals: usdc_metadata.decimals,
                            name: Some(usdc_metadata.name.clone()),
                        },
                        token_out: Token {
                            mint: solana_sdk::pubkey::Pubkey::try_from(token_mint.as_bytes()).unwrap_or_default(),
                            symbol: sol_metadata.symbol.clone(),
                            decimals: sol_metadata.decimals,
                            name: Some(sol_metadata.name.clone()),
                        },
                        amount_in: expected_amount_out.clone(),
                        expected_amount_out: amount_in.clone(),
                        price_impact: slippage_estimate,
                        fee: fee_estimate.clone(),
                        slippage_estimate,
                        gas_estimate: gas_estimate.clone(),
                    },
                ],
                expected_profit: profit as f64 / 1_000_000_000.0, // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ SOL
                total_cost: Amount::new(fee_estimate.value + gas_estimate.value, 9),
                profit_percentage,
                risk_score: self.calculate_risk_score(profit_percentage, slippage_estimate),
                confidence_score: self.calculate_confidence_score(profit_percentage, slippage_estimate),
                execution_time_estimate: std::time::Duration::from_millis(500),
                timestamp: std::time::Instant::now(),
            };
            
            return Some(route);
        }
        
        None
    }
    
    /// –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä—ã –¥–ª—è —Ç–æ–∫–µ–Ω–∞
    async fn get_available_trading_pairs(&self, base_token: &str) -> HashMap<String, Vec<PriceData>> {
        // –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –∑–¥–µ—Å—å –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞—Ä—ã
        // –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ –¥–ª—è SOL/USDC
        let mut pairs = HashMap::new();
        
        if base_token == "111111111111111111111111111111111111111111111111111111111111111111" {
            // SOL -> USDC
            let usdc_mint = "EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v"; // USDC mint
            let demo_prices = vec![
                PriceData {
                    token_mint: usdc_mint.to_string(),
                    dex_type: DexType::OrcaWhirlpool,
                    pool_id: "orca_sol_usdc_pool".to_string(),
                    price: 0.00098, // 1 SOL = 0.00098 USDC (–ø—Ä–∏–º–µ—Ä–Ω–æ 98 USDC –∑–∞ 1 SOL)
                    liquidity: Amount::new(1000000000000, 9), // 1000 SOL
                    volume_24h: Some(1000000.0),
                    price_change_24h: Some(0.01),
                    timestamp: std::time::Instant::now(),
                },
                PriceData {
                    token_mint: usdc_mint.to_string(),
                    dex_type: DexType::RaydiumAMM,
                    pool_id: "raydium_sol_usdc_pool".to_string(),
                    price: 0.00100, // 1 SOL = 0.00100 USDC (100 USDC –∑–∞ 1 SOL)
                    liquidity: Amount::new(800000000000, 9), // 800 SOL
                    volume_24h: Some(800000.0),
                    price_change_24h: Some(0.02),
                    timestamp: std::time::Instant::now(),
                },
            ];
            pairs.insert(usdc_mint.to_string(), demo_prices);
        }
        
        pairs
    }

    /// –ü–æ–∏—Å–∫ Triangle –∞—Ä–±–∏—Ç—Ä–∞–∂–∞ (A -> B -> C -> A)
    async fn find_triangle_arbitrage(
        &self,
        token_mint: &str,
        prices: &[&PriceData],
        all_token_prices: &HashMap<String, Vec<&PriceData>>,
    ) -> Option<ArbitrageRoute> {
        // –ò—â–µ–º —Ç–æ–∫–µ–Ω—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ç–æ—Ä–≥—É—é—Ç—Å—è —Å –±–∞–∑–æ–≤—ã–º —Ç–æ–∫–µ–Ω–æ–º
        let mut triangle_routes = Vec::new();
        
        for (other_token, other_prices) in all_token_prices {
            if other_token == token_mint {
                continue;
            }

            // –ò—â–µ–º –º–∞—Ä—à—Ä—É—Ç: A -> B -> C -> A
            if let Some(route) = self.find_triangle_route(token_mint, other_token, prices, other_prices).await {
                triangle_routes.push(route);
            }
        }

        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–∞–º—ã–π –ø—Ä–∏–±—ã–ª—å–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç
        triangle_routes.into_iter()
            .max_by(|a, b| a.profit_percentage.partial_cmp(&b.profit_percentage).unwrap_or(std::cmp::Ordering::Equal))
    }

    /// –ü–æ–∏—Å–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞
    async fn find_triangle_route(
        &self,
        token_a: &str,
        token_b: &str,
        prices_a: &[&PriceData],
        prices_b: &[&PriceData],
    ) -> Option<ArbitrageRoute> {
        if prices_a.len() < 2 || prices_b.len() < 2 {
            return None;
        }

        // –ù–∞—Ö–æ–¥–∏–º –ª—É—á—à–∏–µ —Ü–µ–Ω—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        let best_buy_a = prices_a.iter().min_by(|a, b| a.price.partial_cmp(&b.price).unwrap_or(std::cmp::Ordering::Equal))?;
        let best_sell_a = prices_a.iter().max_by(|a, b| a.price.partial_cmp(&b.price).unwrap_or(std::cmp::Ordering::Equal))?;
        let best_buy_b = prices_b.iter().min_by(|a, b| a.price.partial_cmp(&b.price).unwrap_or(std::cmp::Ordering::Equal))?;
        let best_sell_b = prices_b.iter().max_by(|a, b| a.price.partial_cmp(&b.price).unwrap_or(std::cmp::Ordering::Equal))?;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Ä–∞–∑–Ω—ã–µ DEX
        if best_buy_a.dex_type == best_sell_a.dex_type || 
           best_buy_b.dex_type == best_sell_b.dex_type {
            return None;
        }

        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç—å —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞
        let base_amount = 1000000000u64; // 1 SOL
        
        // A -> B (–ø–æ–∫—É–ø–∞–µ–º B –∑–∞ A)
        let amount_b = (base_amount as f64 / best_buy_b.price) as u64;
        
        // B -> A (–ø—Ä–æ–¥–∞–µ–º B –∑–∞ A)
        let amount_a_final = (amount_b as f64 * best_sell_b.price) as u64;
        
        let profit = if amount_a_final > base_amount {
            amount_a_final - base_amount
        } else {
            return None; // –£–±—ã—Ç–æ—á–Ω–æ
        };

        let profit_percentage = profit as f64 / base_amount as f64;
        
        if profit_percentage < self.min_profit_threshold {
            return None;
        }

        // –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω–æ–≤
        let metadata_a = match self.token_metadata.get_token_metadata(token_a).await {
            Ok(m) => m,
            Err(_) => return None,
        };
        
        let metadata_b = match self.token_metadata.get_token_metadata(token_b).await {
            Ok(m) => m,
            Err(_) => return None,
        };

        // –°–æ–∑–¥–∞–µ–º —Ç—Ä–µ—É–≥–æ–ª—å–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç
        let route = ArbitrageRoute {
            id: format!("triangle_{}_{}_{}", metadata_a.symbol, metadata_b.symbol, metadata_a.symbol),
            steps: vec![
                // A -> B
                ArbitrageStep {
                    dex_type: best_buy_b.dex_type.clone(),
                    pool_id: best_buy_b.pool_id.clone(),
                    token_in: Token {
                        mint: solana_sdk::pubkey::Pubkey::try_from(token_a.as_bytes()).unwrap_or_default(),
                        symbol: metadata_a.symbol.clone(),
                        decimals: metadata_a.decimals,
                        name: Some(metadata_a.name.clone()),
                    },
                    token_out: Token {
                        mint: solana_sdk::pubkey::Pubkey::try_from(token_b.as_bytes()).unwrap_or_default(),
                        symbol: metadata_b.symbol.clone(),
                        decimals: metadata_b.decimals,
                        name: Some(metadata_b.name.clone()),
                    },
                    amount_in: Amount::new(base_amount, 9),
                    expected_amount_out: Amount::new(amount_b, 9),
                    price_impact: 0.001,
                    fee: Amount::new(5000000, 9),
                    slippage_estimate: 0.001,
                    gas_estimate: Amount::new(5000000, 9),
                },
                // B -> A
                ArbitrageStep {
                    dex_type: best_sell_b.dex_type.clone(),
                    pool_id: best_sell_b.pool_id.clone(),
                    token_in: Token {
                        mint: solana_sdk::pubkey::Pubkey::try_from(token_b.as_bytes()).unwrap_or_default(),
                        symbol: metadata_b.symbol.clone(),
                        decimals: metadata_b.decimals,
                        name: Some(metadata_b.name.clone()),
                    },
                    token_out: Token {
                        mint: solana_sdk::pubkey::Pubkey::try_from(token_a.as_bytes()).unwrap_or_default(),
                        symbol: metadata_a.symbol.clone(),
                        decimals: metadata_a.decimals,
                        name: Some(metadata_a.name.clone()),
                    },
                    amount_in: Amount::new(amount_b, 9),
                    expected_amount_out: Amount::new(amount_a_final, 9),
                    price_impact: 0.001,
                    fee: Amount::new(5000000, 9),
                    slippage_estimate: 0.001,
                    gas_estimate: Amount::new(5000000, 9),
                },
            ],
            expected_profit: profit as f64,
            profit_percentage,
            total_cost: Amount::new(20000000, 9), // 0.02 SOL
            risk_score: 0.4, // –°—Ä–µ–¥–Ω–∏–π —Ä–∏—Å–∫ –¥–ª—è —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞
            timestamp: Instant::now(),
            confidence_score: 0.8,
            execution_time_estimate: Duration::from_millis(800),
        };

        info!("üéØ Triangle –∞—Ä–±–∏—Ç—Ä–∞–∂: {} -> {} -> {} (–ø—Ä–∏–±—ã–ª—å: {:.2}%)", 
            metadata_a.symbol, metadata_b.symbol, metadata_a.symbol, profit_percentage * 100.0);

        Some(route)
    }

    /// –ü–æ–∏—Å–∫ Multi-Hop –∞—Ä–±–∏—Ç—Ä–∞–∂–∞ (A -> B -> C -> D -> A)
    async fn find_multi_hop_arbitrage(
        &self,
        token_mint: &str,
        prices: &[&PriceData],
        all_token_prices: &HashMap<String, Vec<&PriceData>>,
    ) -> Option<ArbitrageRoute> {
        // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–∏—Å–∫ –º–Ω–æ–≥–æ—à–∞–≥–æ–≤–æ–≥–æ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞
        // –≠—Ç–æ —Ç—Ä–µ–±—É–µ—Ç –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∞ —Ç–æ–∫–µ–Ω–æ–≤ –∏ –ø–æ–∏—Å–∫–∞ —Ü–∏–∫–ª–æ–≤
        None
    }

    /// –†–∞—Å—á–µ—Ç –æ—Ü–µ–Ω–∫–∏ –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏
    fn calculate_slippage_estimate(&self, amount_in: u64, pool_liquidity: u64) -> f64 {
        let liquidity_ratio = amount_in as f64 / pool_liquidity as f64;
        
        // –ü—Ä–æ—Å—Ç–∞—è –º–æ–¥–µ–ª—å –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏—è: –∫–≤–∞–¥—Ä–∞—Ç–∏—á–Ω–∞—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—Ç —Ä–∞–∑–º–µ—Ä–∞ —Å–¥–µ–ª–∫–∏
        let slippage = liquidity_ratio * liquidity_ratio * 0.1; // 10% –±–∞–∑–æ–≤—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç
        
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏–µ
        slippage.min(self.max_slippage)
    }

    /// –†–∞—Å—á–µ—Ç –∫–æ–º–∏—Å—Å–∏–π –¥–ª—è DEX
    fn calculate_fee_estimate(&self, dex_type: &DexType, amount: u64) -> Amount {
        let fee_rate = match dex_type {
            DexType::OrcaWhirlpool => 0.0003, // 0.03%
            DexType::RaydiumAMM => 0.0025,    // 0.25%
        };

        Amount::new((amount as f64 * fee_rate) as u64, 9)
    }

    /// –†–∞—Å—á–µ—Ç –≥–∞–∑–∞ –¥–ª—è DEX
    fn calculate_gas_estimate(&self, dex_type: &DexType) -> Amount {
        let gas_estimate = match dex_type {
            DexType::OrcaWhirlpool => 5000000,  // 0.005 SOL
            DexType::RaydiumAMM => 6000000,     // 0.006 SOL
        };

        Amount::new(gas_estimate, 9)
    }

    /// –†–∞—Å—á–µ—Ç –æ—Ü–µ–Ω–∫–∏ —Ä–∏—Å–∫–∞ –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–∞
    fn calculate_risk_score(&self, profit_percentage: f64, slippage_estimate: f64) -> f64 {
        let mut risk_score: f64 = 0.0;

        // –†–∏—Å–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–∏–±—ã–ª–∏
        if profit_percentage < 0.001 { // 0.1% –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å
            risk_score += 0.5; // –ù–∏–∑–∫–∞—è –ø—Ä–∏–±—ã–ª—å = –≤—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫
        } else if profit_percentage < 0.01 { // 1% –ø—Ä–∏–±—ã–ª—å
            risk_score += 0.3; // –°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å = —Å—Ä–µ–¥–Ω–∏–π —Ä–∏—Å–∫
        } else {
            risk_score += 0.1; // –í—ã—Å–æ–∫–∞—è –ø—Ä–∏–±—ã–ª—å = –Ω–∏–∑–∫–∏–π —Ä–∏—Å–∫
        }

        // –†–∏—Å–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏—è
        if slippage_estimate > 0.05 { // 5% –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏–µ
            risk_score += 0.4; // –í—ã—Å–æ–∫–æ–µ –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏–µ = –≤—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫
        } else if slippage_estimate > 0.01 { // 1% –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏–µ
            risk_score += 0.2; // –°—Ä–µ–¥–Ω–µ–µ –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏–µ = —Å—Ä–µ–¥–Ω–∏–π —Ä–∏—Å–∫
        } else {
            risk_score += 0.1; // –ù–∏–∑–∫–æ–µ –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏–µ = –Ω–∏–∑–∫–∏–π —Ä–∏—Å–∫
        }

        // –†–∏—Å–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ (—É–ø—Ä–æ—â–µ–Ω–Ω–æ)
        // –≠—Ç–æ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —Ç–µ–∫—É—â–µ–π –ª–æ–≥–∏–∫–µ Two-Hop, –Ω–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω
        // –µ—Å–ª–∏ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —à–∞–≥–∞
        risk_score.min(1.0) // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∏—Å–∫
    }

    /// –†–∞—Å—á–µ—Ç —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –≤ —Ä–∞—Å—á–µ—Ç–∞—Ö
    fn calculate_confidence_score(&self, profit_percentage: f64, slippage_estimate: f64) -> f64 {
        let mut confidence: f64 = 1.0;

        // –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–∏–±—ã–ª–∏
        if profit_percentage < 0.001 { // 0.1% –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å
            confidence *= 0.6; // –ù–∏–∑–∫–∞—è –ø—Ä–∏–±—ã–ª—å —Å–Ω–∏–∂–∞–µ—Ç —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
        } else if profit_percentage < 0.01 { // 1% –ø—Ä–∏–±—ã–ª—å
            confidence *= 0.8; // –°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å = —Å—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
        } else {
            confidence *= 0.9; // –í—ã—Å–æ–∫–∞—è –ø—Ä–∏–±—ã–ª—å = –≤—ã—Å–æ–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
        }

        // –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏—è
        if slippage_estimate > 0.05 { // 5% –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏–µ
            confidence *= 0.7; // –í—ã—Å–æ–∫–æ–µ –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏–µ —Å–Ω–∏–∂–∞–µ—Ç —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
        } else if slippage_estimate > 0.01 { // 1% –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏–µ
            confidence *= 0.9; // –°—Ä–µ–¥–Ω–µ–µ –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏–µ = —Å—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
        } else {
            confidence *= 1.0; // –ù–∏–∑–∫–æ–µ –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏–µ = –≤—ã—Å–æ–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
        }

        // –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ (—É–ø—Ä–æ—â–µ–Ω–Ω–æ)
        // –≠—Ç–æ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —Ç–µ–∫—É—â–µ–π –ª–æ–≥–∏–∫–µ Two-Hop, –Ω–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω
        confidence.max(0.1) // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å 10%
    }

    /// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç–∏ –º–∞—Ä—à—Ä—É—Ç–∞ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ —Ä–∞—Å—á–µ—Ç–∞–º–∏
    pub fn calculate_route_profit(&self, route: &ArbitrageRoute) -> ProfitCalculation {
        let gross_profit = route.expected_profit;
        
        // –°—É–º–º–∏—Ä—É–µ–º –≤—Å–µ –∫–æ–º–∏—Å—Å–∏–∏
        let total_fees: u64 = route.steps.iter().map(|step| step.fee.value).sum();
        let total_gas: u64 = route.steps.iter().map(|step| step.gas_estimate.value).sum();
        
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏–µ
        let total_slippage_cost = route.steps.iter()
            .map(|step| step.expected_amount_out.value as f64 * step.slippage_estimate)
            .sum::<f64>();

        let net_profit = gross_profit - total_fees as f64 - total_gas as f64 - total_slippage_cost;
        let profit_margin = if gross_profit > 0.0 { net_profit / gross_profit } else { 0.0 };
        let is_profitable = net_profit > 0.0 && profit_margin >= self.min_profit_threshold;
        
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º ROI
        let total_investment = route.steps[0].amount_in.value as f64;
        let roi_percentage = if total_investment > 0.0 { (net_profit / total_investment) * 100.0 } else { 0.0 };
        
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–æ—á–∫—É –±–µ–∑—É–±—ã—Ç–æ—á–Ω–æ—Å—Ç–∏
        let break_even_amount = if roi_percentage > 0.0 { 
            total_investment * (1.0 + (total_fees as f64 + total_gas as f64 + total_slippage_cost) / total_investment)
        } else { 
            0.0 
        };

        ProfitCalculation {
            gross_profit,
            net_profit,
            gas_cost: Amount::new(total_gas, 9),
            slippage_cost: total_slippage_cost,
            fee_cost: total_fees as f64,
            profit_margin,
            is_profitable,
            roi_percentage,
            break_even_amount,
        }
    }

    /// –í–∞–ª–∏–¥–∞—Ü–∏—è –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ –º–∞—Ä—à—Ä—É—Ç–∞ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
    pub fn validate_route_liquidity(&self, route: &ArbitrageRoute) -> bool {
        for step in &route.steps {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—É–º–º–∞ —Å–¥–µ–ª–∫–∏ –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å –ø—É–ª–∞
            if step.amount_in.value > step.expected_amount_out.value {
                // –ï—Å–ª–∏ –≤—Ö–æ–¥ –±–æ–ª—å—à–µ –≤—ã—Ö–æ–¥–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å –≤—Ö–æ–¥–∞
                if step.amount_in.value < self.min_liquidity.value {
                    return false;
                }
            } else {
                // –ï—Å–ª–∏ –≤—ã—Ö–æ–¥ –±–æ–ª—å—à–µ –≤—Ö–æ–¥–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å –≤—ã—Ö–æ–¥–∞
                if step.expected_amount_out.value < self.min_liquidity.value {
                    return false;
                }
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏–µ –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –¥–æ–ø—É—Å—Ç–∏–º–æ–µ
            if step.slippage_estimate > self.max_slippage {
                return false;
            }
        }
        true
    }

    /// –û–±–Ω–æ–≤–∏—Ç—å –∫—ç—à —Ü–µ–Ω —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    pub async fn update_price_cache(&self, price_data: PriceData) {
        let mut cache = self.price_cache.write().await;
        cache.insert(price_data.token_mint.clone(), price_data);
    }

    /// –ü–æ–ª—É—á–∏—Ç—å –∫—ç—à —Ü–µ–Ω
    pub async fn get_price_cache(&self) -> HashMap<String, PriceData> {
        self.price_cache.read().await.clone()
    }

    /// –û—á–∏—Å—Ç–∏—Ç—å —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ —Ü–µ–Ω—ã
    pub async fn cleanup_stale_prices(&self, max_age: Duration) {
        let mut cache = self.price_cache.write().await;
        let now = Instant::now();
        cache.retain(|_, price| now.duration_since(price.timestamp) <= max_age);
    }

    /// –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫—ç—à–∞ —Ü–µ–Ω
    pub async fn get_cache_stats(&self) -> (usize, Duration) {
        let cache = self.price_cache.read().await;
        let size = cache.len();
        let oldest_timestamp = cache.values()
            .map(|p| p.timestamp)
            .min()
            .unwrap_or(Instant::now());
        let age = Instant::now().duration_since(oldest_timestamp);
        (size, age)
    }
}

#[cfg(test)]
mod tests {
    use super::*;
    use crate::domain::dex::DexType;

    #[tokio::test]
    async fn test_find_two_hop_arbitrage() {
        let rpc_client = Arc::new(solana_client::rpc_client::RpcClient::new("".to_string()));
        let token_metadata = Arc::new(TokenMetadataService::new(rpc_client));
        let detector = ArbitrageOpportunityDetector::new_default(token_metadata);
        
        let price_data = vec![
            PriceData {
                token_mint: "SOL".to_string(),
                price: 100.0,
                dex_type: DexType::OrcaWhirlpool,
                pool_id: "pool1".to_string(),
                timestamp: Instant::now(),
                liquidity: Amount::new(1000000000, 9),
                volume_24h: Some(1000000000.0),
                price_change_24h: Some(0.01),
            },
            PriceData {
                token_mint: "SOL".to_string(),
                price: 98.0,
                dex_type: DexType::RaydiumAMM,
                pool_id: "pool2".to_string(),
                timestamp: Instant::now(),
                liquidity: Amount::new(1000000000, 9),
                volume_24h: Some(1000000000.0),
                price_change_24h: Some(0.01),
            },
        ];

        let routes = detector.find_arbitrage_routes(&price_data).await;
        assert!(!routes.is_empty());
        
        let route = &routes[0];
        assert_eq!(route.steps.len(), 2);
        assert!(route.profit_percentage > 0.0);
    }
}
